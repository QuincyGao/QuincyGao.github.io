<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>QuincyGao Blog</title>
        <link>https://QuincyGao.github.io/</link>
        <description>Recent content on QuincyGao Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 14 Jan 2025 08:59:33 +0800</lastBuildDate><atom:link href="https://QuincyGao.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>opensips 压测介绍</title>
        <link>https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Tue, 14 Jan 2025 08:59:33 +0800</pubDate>
        
        <guid>https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;img src="https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/backup.jpg" alt="Featured image of post opensips 压测介绍" /&gt;&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍
&lt;/h2&gt;&lt;p&gt;自从使用opensips和rtpengine做sbc以来，一直对其所能支撑的并发数有所怀疑，正好最近项目不多，就申请了三台阿里云机器来做压测，共耗时一个月。&lt;/p&gt;
&lt;p&gt;本次压测的功能：把opensips用作注册代理转发，现对压测结果做个总结。&lt;/p&gt;
&lt;h2 id=&#34;压测模型&#34;&gt;压测模型
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/screen.png&#34;
	width=&#34;1205&#34;
	height=&#34;350&#34;
	srcset=&#34;https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/screen_hu10290184277584654570.png 480w, https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/screen_hu15185802119383751209.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;部署方式&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;344&#34;
		data-flex-basis=&#34;826px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;压测场景&#34;&gt;压测场景
&lt;/h2&gt;&lt;p&gt;坐席A和B使用udp通过opensips注册到uas，坐席A通过opensips拨打电话到坐席B, 坐席B接通电话后，坐席A和B通过opensips进行2分钟通话，然后坐席A挂断电话。&lt;/p&gt;
&lt;h2 id=&#34;版本信息&#34;&gt;版本信息
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;opensips: 3.3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rtpengine: 13.1.0.0+0~mr13.1.0.0 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;opensips和rtpengine 分别用host模式docker容器运行。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;opensips&lt;/strong&gt;和&lt;strong&gt;rtpengine&lt;/strong&gt;使用docker部署的好处就是使用&lt;code&gt;docker stats&lt;/code&gt; 能够获取容器是实际占用内存和cpu使用率&lt;/p&gt;
&lt;h2 id=&#34;监控指标&#34;&gt;监控指标
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu使用率
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;负载
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;内存使用率
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;网络带宽
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcp 连接数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;通话数
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;监控工具&#34;&gt;监控工具
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;阿里云的资源监控
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;opensips-cli
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker stats 命令
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;压测注意问题&#34;&gt;压测注意问题
&lt;/h2&gt;&lt;h3 id=&#34;1-压测的cps和通话时长要合适&#34;&gt;1. 压测的cps和通话时长要合适
&lt;/h3&gt;&lt;p&gt;压测目的是&lt;strong&gt;保持稳定并发数时的资源使用情况&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果通话时长太短比如:1分钟以内，在高并发的情况下(1000往上)，无法稳定保持并发数。&lt;/li&gt;
&lt;li&gt;如果cps太大，此时网络带宽会有比较大的波动，高并发数情况下，opensips和uas会出现丢包情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;合理的cps计算方式为: &lt;code&gt;并发数/通话时长(s)&lt;/code&gt;,如果是小数可以适当向上取整。
比如: 1000并发数，通话时长为2分钟，那么cps为1000/120=8.3约等于9。 对应的sipp 命令为: &lt;code&gt; -r 9 -rp 1s&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-如何确定总压测时长&#34;&gt;2. 如何确定总压测时长
&lt;/h3&gt;&lt;p&gt;压测时长2小时，实际的sipp压测脚本参数并没有总通话时长，但sipp中有总压测数参数，那么应该如何确定压测时长呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总压测数=并发数*压测时长(分钟)/通话时长(分钟)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于此压测场景，总压测数=1000*120/2=60000,对应的sipp命令为: &lt;code&gt;-m 60000&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：实际压测中并不是并发数1000，sipp的-l 就是1000，可能会比1000多几个，按照实际压测来调整.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-完整的uac-sipp命令&#34;&gt;3. 完整的uac sipp命令
&lt;/h3&gt;&lt;p&gt;以1000路为例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./sipp -r 9 -rp 1s -i 172.16.4.115 -p 5667  -sf register.xml -inf $csvfile 172.20.231.4:5261 -l 1019 -m 61140 -aa -trace_err -error_file ./reg_error.log -bg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;压测结果分析&#34;&gt;压测结果分析
&lt;/h2&gt;&lt;h3 id=&#34;opensips和rtpengine的内存未释放&#34;&gt;opensips和rtpengine的内存未释放？
&lt;/h3&gt;&lt;p&gt;在udp压测时，opensips的运行参数为:  &lt;code&gt;-m 2048 -M 100&lt;/code&gt; 意思为:共享内存为2048MB,pkg内存100MB, &lt;code&gt;udp_workers=32 tcp_workers=8&lt;/code&gt;。
在实际压测过程中，阿里云的监控能够看到，内存使用率一直都是2G，变化较少。但是通过&lt;code&gt;docker stats&lt;/code&gt;分别在压测开始和结束统计,能够看到opensips和rtpengine的实际占用内存是有变化的。以1000路为例:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;opensips:959.4MiB-&amp;gt;982MiB   |    rtpengine: 23.89MiB-&amp;gt;87.73MiB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压测停止6小时之后，opensips和rtpengine的docker实际占用内存并没有减少，一开始我以为是&lt;strong&gt;内存泄露&lt;/strong&gt;，调整opensips.cfg添加&lt;code&gt;memdump=2&lt;/code&gt;开启内存打印。&lt;/p&gt;
&lt;p&gt;在压测结束后， 通过&lt;code&gt;opensips-cli&lt;/code&gt;执行&lt;code&gt;mi mem_shm_dump&lt;/code&gt;,参考：&lt;a class=&#34;link&#34; href=&#34;https://www.opensips.org/Documentation/TroubleShooting-OutOfMem&#34;  title=&#34;opensips内存泄漏排查&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;opensips内存泄漏排查&lt;/a&gt;，并没有发现有相似的&lt;code&gt;dumping all alloc&#39;ed. fragments&lt;/code&gt;。
而且压测结束后，查看rtpengine的端口占用情况，rtp端口都被释放了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;值得注意的是：并发数减少，opensips和rtpengin的内存占用不会变，并发数增加，它们的内存会往上升。之后一直维持该内存大小不再增加。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;个人猜测： opensips和rtpengine的占用内存是&lt;strong&gt;动态扩展&lt;/strong&gt;的，当并发数增加，内存会自动扩展，当并发数减少，占用的内存不会自动释放。&lt;/p&gt;
&lt;h3 id=&#34;压测极限&#34;&gt;压测极限
&lt;/h3&gt;&lt;h4 id=&#34;监测数据&#34;&gt;监测数据
&lt;/h4&gt;&lt;p&gt;本次使用的是&lt;code&gt;opensips-cli&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mi get_statistics dialog active_dialogs     可以查看实时通话量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mi get_statistics dialog processed_dialogs  可以查看通话总数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mi get_statistics all                       可以查看所有统计数据
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;实际压测数据&#34;&gt;实际压测数据
&lt;/h4&gt;&lt;p&gt;8C8G压测的极限是1700路，此极限是rtpengine的极限,cpu负载过大，导致rtpengine出流较慢，影响了通话质量。opensips其实并未到极限。&lt;/p&gt;
&lt;p&gt;压测结束后，通过&lt;code&gt;opensips-cli&lt;/code&gt;执行&lt;code&gt;mi get_statistics all&lt;/code&gt;
能够看到实际占用的内存很少，还有大量的内存空闲。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;shmem:total_size&amp;#34;: 2147483648,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;shmem:max_used_size&amp;#34;: 15768384,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;shmem:free_size&amp;#34;: 2142524128,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;shmem:used_size&amp;#34;: 4708928,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;shmem:real_used_size&amp;#34;: 4959520,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;shmem:fragments&amp;#34;: 3871,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;rpmem:rpm_total_size&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;rpmem:rpm_used_size&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;rpmem:rpm_real_used_size&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;rpmem:rpm_fragments&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;rpmem:rpm_max_used_size&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;rpmem:rpm_free_size&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;sip-使用tcp通信&#34;&gt;sip 使用tcp通信
&lt;/h4&gt;&lt;p&gt;场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;uac&amp;ndash;tcp&amp;mdash;-&amp;gt;opensips&amp;mdash;-tcp&amp;mdash;-&amp;gt;uas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;uac和opensips使用tcp通信，uac是多个tcp连接到opensips的同一个端口.&lt;/li&gt;
&lt;li&gt;在opensips和uas使用tcp通信时，原本以为会是多个tcp和uas连接，结果只用了&lt;strong&gt;一个tcp连接&lt;/strong&gt;，所有的请求都是&lt;strong&gt;复用&lt;/strong&gt;这个tcp连接。&lt;/li&gt;
&lt;li&gt;tcp的性能比udp性能要高，tcp连接方式并发能到1800路。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;opensips-cli只能获取实时数据，无法获取历史数据。可以考虑使用opensips-cp监控。&lt;/li&gt;
&lt;li&gt;rtpengine在高并发情况下，为啥会出流慢，目前还未找到原因，rtpengine的日志也没有报错。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>关于我</title>
        <link>https://QuincyGao.github.io/about/</link>
        <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://QuincyGao.github.io/about/</guid>
        <description>&lt;img src="https://QuincyGao.github.io/about/cat.png" alt="Featured image of post 关于我" /&gt;</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://QuincyGao.github.io/archives/</link>
        <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://QuincyGao.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://QuincyGao.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://QuincyGao.github.io/search/</guid>
        <description></description>
        </item>
        <item>
        <title>友链</title>
        <link>https://QuincyGao.github.io/%E5%8F%8B%E9%93%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://QuincyGao.github.io/%E5%8F%8B%E9%93%BE/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
