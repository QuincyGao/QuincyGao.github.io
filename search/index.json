[{"content":"registrar模块简介 version: kamailio 5.8.5 (x86_64/linux)\n本文主要是通过实战来展示参数的用法，让您有个比较清晰的认识。官方文档地址：kamailio.org\n重要参数介绍 default_expires 默认过期时间3600s,此参数只有在REGISTER信令中没有Expires或者contact中没有expires时生效,如果有这些参数，此变量不生效。 软电话都带有Expires,目前无法模拟.\ndefault_exipires_range 默认过期时间变化范围(0-100),[default_expires - default_expires_range%, default_expires]\nexpires_range 作用在expires上，范围(0-100), 例如:30,那么expires的范围为 [0.7*expires, expires]\n1 modparam(\u0026#34;registrar\u0026#34;, \u0026#34;expires_range\u0026#34;, 30) REGISTER的Expires为300 ,usrloc中存储的过期时间为210~300之间,此时返回的200OK的Contact里的expires也是此随机值 min_expires min_expires_mode 最小的过期时间，如果REGISTER里的Expires大于此值，此值不起作用,过期时间按照Expires。 REGISTER里Expires(70)时间小于min_expires(100):\nmin_expires_mode为0时, 设置usrloc里坐席过期时间为min_expires,200OK返里的Contact的expires为min_expires min_expires_mode为1时, kamailio会返回423 Interval Too Brief,并带有Min-Expires时间， 软电话收到此错误，会自动重试，重试的Expires为min_expires,此时注册成功。 max_expires 最大过期时间，REGISTER的Expires过期时间高过此值，坐席过期时间以此值为准； 比此值低，则按照REGISTER的Expires过期。\nappend_branches 默认是1, 当一个用户有多个Contacts时(比如:同一个账号使用不同的软电话注册),在lookup查找坐席时：\nappend_branches为1时,会给所有的Contact发送请求 append_branches为0时,只给第一个Contact发送请求 received_avp 1 modparam(\u0026#34;registrar\u0026#34;, \u0026#34;received_avp\u0026#34;, \u0026#34;$avp(s:rcv)\u0026#34;) 存储REGISTER的Received地址到s:rcv变量中。\nreceived_param 默认received, 返回200OK的Contact里带received变量: max_contacts 能接受的最大Contact个数,超过会报错503,设置max_contacts为1, 使用两个软电话注册同一个账号,第二个报错： retry_after REGISTER返回5xx错误之后，重新尝试注册的间隔。5xx的返回头带此参数Retry-After\nmethod_filtering lookup 查找用户时，contact是否支持method过滤,0不支持,其他为支持。\noutbound_mode 默认是0,接受不带Supported的REGISTER,返回的200OK不带Require 如果REGISTER带Require, 报错返回420 Bad Extension 1,接受带Supported的REGISTER,返回的200OK带Require或者Supported 2,拒绝不带Supported的REGISTER contact_max_size 设置contact的最大长度,默认为512\nuse_expired_contacts 是否使用过期的contacts,默认0不用,1使用\n重要函数介绍 save(domain, [,flag [,uri]]) domain为:location flag: 0x01: 不存DB,只缓存 0x02: 不生成SIP reply,不能用在ONREPLY_ROUTE上, 可以用在转发注册上 0x04: 只保存一个contact,同一个账号有多个软电话注册时,只会保存最新的一个contact 0x08: 使expires_rangeordefault_expires_range失效 0x10: 准备reply的Headers,要和0x02一起使用 url: flag必须先设置,自定义contact的uri 返回值: -2: 错误, 太多contact -1: 错误 1: contact保存成功 2: contact更新成功 3: contact删除成功 4: contact 返回 代理转发示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 route[REGISTRAR] { if (!is_method(\u0026#34;REGISTER\u0026#34;)) return; if(isflagset(FLT_NATS)) { setbflag(FLB_NATB); #!ifdef WITH_NATSIPPING # do SIP NAT pinging setbflag(FLB_NATSIPPING); #!endif } if (!save(\u0026#34;location\u0026#34;,\u0026#34;0x12\u0026#34;)) { sl_reply_error(); } $fs=\u0026#34;tcp:172.16.4.111:5461\u0026#34;; $du=\u0026#34;sip:172.16.4.114:5060;transport=tcp\u0026#34;; route(RELAY); exit; } $fs 为本地出去的地址, $du 为代理方的地址: 从信令可以看出,如果转发的sip协议是tcp,那么出去的端口不是5461,是随机生成的。 flag可以多个叠加，十六进制直接相加即可。 lookup(domain [, uri]) 查找contact, 把Contact放在Request-URI上,转发请求。\nregistered(domain [, uri [, match_option [, match_action]]]) 判断坐席是否已经注册\nunregister(domain, uri[, ruid]) 注销AOR\n总结 registrar模块还有一些其他的参数和函数未提到,目前场景中还未用到，重要的主要是注册，查找，注销功能。\nregistrar需要和usrloc一起使用。usrloc决定是否使用DB存储用户信息。\n","date":"2025-03-05T09:06:55+08:00","image":"https://QuincyGao.github.io/p/registrar%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/backup_hu727594043910014209.jpg","permalink":"https://QuincyGao.github.io/p/registrar%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/","title":"registrar模块介绍"},{"content":"对比的版本 opensips kamailio 版本信息 3.3.10 5.8.5 官方文档地址 https://www.opensips.org/Documentation/Manuals https://www.kamailio.org/w/documentation/ 支持的route类型 序号 opensips kamailio 说明 1 route request_route 请求入口 2 branch_route[a] branch_route[a] 分支路由,a为自定义变量 3 failure_route[a] failure_route[a] 失败路由,a为自定义变量 4 onreply_route reply_route onreply_route{}\nonreply_route[0]{} 主返回路由 5 onreply_route[a] onreply_route[a] 子返回路由,a为自定义变量 6 event_route[a] event_route[a] 事件路由,a为自定义变量 7 error_route - 出错路由 8 local_route - 本地路由 9 startup_route - 服务启动时执行的路由 10 timer_route[a] RTimer模块 定时执行的路由, a为自定义变量 11 - onsend_route 请求发出去前执行的路由 监控管理端 差异 opensips kamailio 运行命令 opensips-cli kamctl 独立编译 是,仓库地址:\nhttps://github.com/OpenSIPS/opensips-cli.git 否\n没有单独仓库，和kamailio一起编译生成 编写语言 Python c 配置文件 ~/.opensips-cli.cfg kamctlrc 创建数据库 opensips-cli -f ~/.opensips-cli.cfg -x database create kamdbctl create kamailio 和服务端连接方式 fifo/http/udp fifo 说明:\nopensips-cli因为是Python编写，在做opensips容器时，如果把opensips-cli打包进去，整个包会较大。 可以把opensips-cli单独制作镜像，opensips-cli使用http方式和opensips服务端进行通信。 web管理服务 opensips kamailio 仓库地址 https://github.com/OpenSIPS/opensips-cp.git https://github.com/asipto/siremis-php.git 两个服务都是php的，不太好用，页面样式不好看，中文支持度不好,正在考虑使用Vue3重写。\n功能差异 模块 opensips kamailio 日志 日志带时间 日志不带时间 使用体验 维度 opensips kamailio 上手难度 简单 较高 star(截止20250227) 1.3k 2.4k 模块功能 能满足日常需求 较丰富，还有KEMI脚本语言实现(没有示例，上手难度大) 官方文档 文档层次分明,模块清楚 文档基本完整，但是缺少基本函数检索文档 网络教程 大部分是2.x版本的，3.x文档不全 国内教程少 迭代变化 2.x和3.x版本配置参数区别较大 版本迭代配置参数变化不大 bug修复进度 较慢,起步一个月 较快，一周左右反馈 社区 没有 有,社区地址:\nhttps://lists.kamailio.org/mailman3/hyperkitty/list/sr-users@lists.kamailio.org/ 补充：\nopensips 适合快速上手,负载均衡，sip代理转发等基本能满足日常需求。 kamailio 可以作为进阶版本，后期完全可以不写.cfg配置，用KEMI脚本来写。 两个产品bug的issue都设置了定时删除，没有修复的话，需要自己回复一下才能不被删。 关于并发上，目前线上使用的opensips并未有崩溃的记录，8c8G的机器性能很高，具体可以查看我的opensips 压测介绍文章， kamailio目前还未压测，应该稳定性不差。 opensips没有社区，遇到问题只能提issue，kamailio可以先在社区提问，如果问题没有解决，再提issue。 ","date":"2025-02-28T14:12:33+08:00","permalink":"https://QuincyGao.github.io/p/opensips%E5%92%8Ckamailio%E6%AF%94%E8%BE%83%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/","title":"opensips和kamailio比较(持续更新中···)"},{"content":"背景介绍 本文主要是针对kamailio新手的入门使用介绍, 已默认kamailio服务编译安装成功。 关于kamailio的容器制作方式，后续会有其他章节介绍。\nkamailio 5.8.5 (x86_64/linux)\n准备环境 mysql 5.7.x rtpengine (可选) 创建数据库 我的kamailio安装在/usr/local下，几个目录介绍下：\n/usr/local/bin/ kamailio的二进制文件 1 2 3 4 5 6 ll /usr/local/bin/ total 8024 -rwxr-xr-x. 1 root root 8053416 Feb 27 13:52 kamailio # kamailio主程序 -rwxr-xr-x. 1 root root 74544 Feb 27 13:53 kamcmd # kamailio命令行 -rwxr-xr-x. 1 root root 66247 Feb 27 13:54 kamctl # kamailio控制台 -rwxr-xr-x. 1 root root 10935 Feb 27 13:54 kamdbctl # kamailio数据库管理 /usr/local/etc/kamailio kamailio的配置文件 1 2 3 4 5 ll /usr/local/etc/kamailio total 40 -rw-r--r--. 1 root root 27104 Feb 28 13:48 kamailio.cfg # kamailio主配置文件 -rw-r--r--. 1 root root 4391 Feb 28 13:48 kamctlrc # kamailio控制台配置文件 -rw-r--r--. 1 root root 3543 Feb 27 13:54 tls.cfg # tls配置文件 /usr/local/share/kamailio/ kamailio的sql脚本文件 1 2 3 4 5 ll /usr/local/share/kamailio/ total 4 drwxr-xr-x. 3 root root 22 Feb 27 13:53 db_redis drwxr-xr-x. 3 root root 22 Feb 27 13:53 dbtext drwxr-xr-x. 2 root root 4096 Feb 27 13:52 mysql 如果找不到这些文件，可以在源码utils/kamctl/下找到这些sql文件。\n修改配置文件：/usr/local/etc/kamailio/kamactlrc 如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 DBENGINE=MYSQL ## database host DBHOST=172.16.4.111 ## database port DBPORT=3306 ## database name (for ORACLE this is TNS name) DBNAME=kamailio ## database path used by dbtext, db_berkeley or sqlite DB_PATH=\u0026#34;/usr/local/share/kamailio/mysql\u0026#34; #DB_PATH=\u0026#34;/usr/local/etc/kamailio/dbtext\u0026#34; ## database read/write user DBRWUSER=\u0026#34;kamauser\u0026#34; ## password for database read/write user DBRWPW=\u0026#34;kamailiorw\u0026#34; ## database read only user DBROUSER=\u0026#34;kamailioro\u0026#34; ## password for database read only user DBROPW=\u0026#34;kamailiotest\u0026#34; ## database access host (from where is kamctl used) # DBACCESSHOST=192.168.0.1 ## database super user (for ORACLE this is \u0026#39;scheme-creator\u0026#39; user) DBROOTUSER=\u0026#34;root\u0026#34; ## password for database super user ## - important: this is insecure, targeting the use only for automatic testing ## - known to work for: mysql DBROOTPW=\u0026#34;123456\u0026#34; ## option to ask confirmation for all database creation steps # DBINITASK=yes ## database character set (used by MySQL when creating database) CHARSET=\u0026#34;utf8\u0026#34; 创建数据库：/usr/local/bin/kamdbctl create kamailio 创建过程中有可能会报创建用户失败(CREATE USER xxx failed)，有可能此用户已经存在，\n进入数据库，删除此用户drop user 'xxx'@'%'; 手动删除kamailio 重新使用kamdbctl创建库，就可以了。 几个常用的数据库(mysql5.7.x)操作命令：\n查看用户： 1 SELECT DISTINCT CONCAT(\u0026#39;User: \u0026#39;\u0026#39;\u0026#39;,user,\u0026#39;\u0026#39;\u0026#39;@\u0026#39;\u0026#39;\u0026#39;,host,\u0026#39;\u0026#39;\u0026#39;;\u0026#39;) AS query FROM mysql.user; 删除用户: 1 drop user \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; 配置文件：/usr/local/etc/kamailio/kamailio.cfg，修改以下几点： WITH_MYSQL 使用数据库 1 #!define WITH_MYSQL WITH_USRLOCDB 1 #!define WITH_USRLOCDB DBURL 修改dburl为实际的地址 1 #!trydef DBURL \u0026#34;mysql://kamauser:kamailiorw@172.16.4.111:3306/kamailio\u0026#34; listen 监听服务 1 listen=udp:172.16.4.111:5460 运行服务 /usr/local/bin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -DD -E\n使用软电话MicroSip注册, 密码:1234(随便,默认是没开启用户认证功能),配置如下： 可以再使用另外一个MicroSip注册其他用户到此服务上，两个软电话就能互相拨打了。 ","date":"2025-02-27T15:53:07+08:00","image":"https://QuincyGao.github.io/p/kamailio%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/backup_hu94911474509027823.jpg","permalink":"https://QuincyGao.github.io/p/kamailio%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","title":"kamailio入门使用"},{"content":"功能介绍 topology_hiding 功能主要是隐藏Hearder头里的(Via,Record-Route,Route)，防止被其他服务器探测到。\n在opensips以udp方式转发sip请求时，有可能Header很大，超过了MTU,此时udp会有概率发送失败。 有人可能会想用此方式来减少包量，通过这篇介绍，你就能知道实际上Header头并未减少多少,效果不大。 遇到这种情况，还不如删除一部分头或者改成tcp方式。\n模块配置 opensips版本：\nopensips 3.3.10 (x86_64/linux)\n正常代理的配置：loadmodule \u0026#34;dialog.so\u0026#34; route{ if (!mf_process_maxfwd_header(10)) { sl_send_reply(483,\u0026#34;Too Many Hops\u0026#34;); exit; } if (has_totag()) { # sequential requests within a dialog should # take the path determined by record-routing xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---has_totag-:$rm|$rs|$tu|$socket_in(port)\\n\u0026#34;); if (loose_route()) { if (is_method(\u0026#34;INVITE\u0026#34;)) { # even if in most of the cases is useless, do RR for # re-INVITEs alos, as some buggy clients do change route set # during the dialog. record_route(); } # route it out to whatever destination was set by loose_route() # in $du (destination URI). xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---is-loose_route-:$rm|$rs|$tu|$socket_in(port)\\n\u0026#34;); route(relay); } else { xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---not-loose_route-:$rm|$rs|$tu|$socket_in(port)\\n\u0026#34;); if ( is_method(\u0026#34;ACK\u0026#34;) ) { if ( t_check_trans() ) { # non loose-route, but stateful ACK; must be an ACK after # a 487 or e.g. 404 from upstream server t_relay(); exit; } else { # ACK without matching transaction -\u0026gt; # ignore and discard exit; } } sl_send_reply(404,\u0026#34;Not here\u0026#34;); } exit; } # CANCEL processing if (is_method(\u0026#34;CANCEL\u0026#34;)) { if (t_check_trans()) t_relay(); exit; } t_check_trans(); #if (!is_method(\u0026#34;REGISTER\u0026#34;)) { # if (is_myself(\u0026#34;$fd\u0026#34;)) { # # if caller is not local, then called number must be local # if (!is_myself(\u0026#34;$rd\u0026#34;)) { # send_reply(403,\u0026#34;Rely forbidden\u0026#34;); # exit; # } # } #} # preloaded route checking if (loose_route()) { xlog(\u0026#34;L_ERR\u0026#34;, \u0026#34;Attempt to route with preloaded Route\u0026#39;s [$fu/$tu/$ru/$ci]\u0026#34;); if (!is_method(\u0026#34;ACK\u0026#34;)) sl_send_reply(403,\u0026#34;Preload Route denied\u0026#34;); exit; } # record routing if (!is_method(\u0026#34;REGISTER|MESSAGE\u0026#34;)) record_route(); if (!is_myself(\u0026#34;$rd\u0026#34;)) { append_hf(\u0026#34;P-hint: outbound\\r\\n\u0026#34;); route(relay); } # requests for my domain if (is_method(\u0026#34;PUBLISH|SUBSCRIBE\u0026#34;)) { sl_send_reply(503, \u0026#34;Service Unavailable\u0026#34;); exit; } # check if the clients are using WebSockets or WebSocketSecure if ( $socket_in(proto) == \u0026#34;WS\u0026#34;|| $socket_in(proto) == \u0026#34;WSS\u0026#34;) setflag(\u0026#34;SRC_WS\u0026#34;); # consider the client is behind NAT - always fix the contact #fix_nated_contact(); xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main-1-:$rm|$rs|$tu|$socket_in(port)|$hdr(contact)\\n\u0026#34;); if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); fix_nated_register(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error(); exit; } xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main--:$rm|$rs|$tu|$socket_in(port)|$hdr(contact)\\n\u0026#34;); if ($rU==NULL) { # request with no Username in RURI sl_send_reply(484,\u0026#34;Address Incomplete\u0026#34;); exit; } # do lookup with method filtering if (!lookup(\u0026#34;location\u0026#34;,\u0026#34;m\u0026#34;)) { $ru = \u0026#34;sip:172.16.4.114:5080\u0026#34;; $socket_out = \u0026#34;udp:172.16.4.111:5361\u0026#34;; } #if (!lookup(\u0026#34;location\u0026#34;,\u0026#34;m\u0026#34;)) { # t_newtran(); # t_reply(404, \u0026#34;Not Found\u0026#34;); # exit; #} route(relay); } route[relay] { # for INVITEs enable some additional helper routes if (is_method(\u0026#34;INVITE\u0026#34;)) { t_on_branch(\u0026#34;handle_nat\u0026#34;); t_on_reply(\u0026#34;handle_nat\u0026#34;); } else if (is_method(\u0026#34;BYE|CANCEL\u0026#34;)) { rtpengine_delete(); } if (!t_relay()) { send_reply(500,\u0026#34;Internal Error\u0026#34;); }; exit; } branch_route[handle_nat] { if (!is_method(\u0026#34;INVITE\u0026#34;) || !has_body(\u0026#34;application/sdp\u0026#34;)) return; $var(rtp_flag) = \u0026#34;replace-origin \u0026#34;; if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) { #web-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; ICE=force-relay DTLS=passive\u0026#34;; } else if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)){ #web-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; codec-strip-G722 codec-strip-CN codec-strip-red strip-extmap rtcp-mux-demux DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; } else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) {#sip-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force RTP/SAVPF\u0026#34;; } else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; rtpengine_offer(\u0026#34;$var(rtp_flag)\u0026#34;); } onreply_route[handle_nat] { fix_nated_contact(); if (!has_body(\u0026#34;application/sdp\u0026#34;)) return; $var(rtp_flag) = \u0026#34;replace-origin \u0026#34;; if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) #web-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; ICE=force-relay DTLS=passive\u0026#34;; else if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #web-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; codec-strip-G722 codec-strip-CN codec-strip-red codec-strip-opus rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force\u0026#34;; else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=remove RTP/AVP\u0026#34;; else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; rtpengine_answer(\u0026#34;$var(rtp_flag)\u0026#34;); } 使用topology_hiding的配置：loadmodule \u0026#34;dialog.so\u0026#34; loadmodule \u0026#34;topology_hiding.so\u0026#34; modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;th_callid_passwd\u0026#34;, \u0026#34;my_topo_hiding_secret\u0026#34;) modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;th_callid_prefix\u0026#34;, \u0026#34;MYCALLIDPREFIX_\u0026#34;) modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;th_passed_contact_uri_params\u0026#34;, \u0026#34;paramname1;myparam;custom_param\u0026#34;) modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;th_passed_contact_params\u0026#34;, \u0026#34;paramname1;myparam;custom_param\u0026#34;) modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;th_contact_encode_passwd\u0026#34;, \u0026#34;my_topoh_passwd\u0026#34;) modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;th_contact_encode_param\u0026#34;, \u0026#34;customparam\u0026#34;) route{ if (!mf_process_maxfwd_header(10)) { sl_send_reply(483,\u0026#34;Too Many Hops\u0026#34;); exit; } if (has_totag()) { # sequential requests within a dialog should # take the path determined by record-routing xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---has_totag-:$rm|$rs|$tu|$socket_in(port)\\n\u0026#34;); if (topology_hiding_match()) { if (is_method(\u0026#34;INVITE\u0026#34;)) { # even if in most of the cases is useless, do RR for # re-INVITEs alos, as some buggy clients do change route set # during the dialog. record_route(); } # route it out to whatever destination was set by loose_route() # in $du (destination URI). xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---is-loose_route-:$rm|$rs|$tu|$socket_in(port)\\n\u0026#34;); route(relay); } else { xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---not-loose_route-:$rm|$rs|$tu|$socket_in(port)\\n\u0026#34;); if ( is_method(\u0026#34;ACK\u0026#34;) ) { if ( t_check_trans() ) { # non loose-route, but stateful ACK; must be an ACK after # a 487 or e.g. 404 from upstream server t_relay(); exit; } else { # ACK without matching transaction -\u0026gt; # ignore and discard exit; } } sl_send_reply(404,\u0026#34;Not here\u0026#34;); } exit; } # CANCEL processing if (is_method(\u0026#34;CANCEL\u0026#34;)) { if (t_check_trans()) t_relay(); exit; } t_check_trans(); #if (!is_method(\u0026#34;REGISTER\u0026#34;)) { # if (is_myself(\u0026#34;$fd\u0026#34;)) { # # if caller is not local, then called number must be local # if (!is_myself(\u0026#34;$rd\u0026#34;)) { # send_reply(403,\u0026#34;Rely forbidden\u0026#34;); # exit; # } # } #} # preloaded route checking if (loose_route()) { xlog(\u0026#34;L_ERR\u0026#34;, \u0026#34;Attempt to route with preloaded Route\u0026#39;s [$fu/$tu/$ru/$ci]\u0026#34;); if (!is_method(\u0026#34;ACK\u0026#34;)) sl_send_reply(403,\u0026#34;Preload Route denied\u0026#34;); exit; } # record routing if (!is_method(\u0026#34;REGISTER|MESSAGE\u0026#34;)) record_route(); if (!is_myself(\u0026#34;$rd\u0026#34;)) { append_hf(\u0026#34;P-hint: outbound\\r\\n\u0026#34;); route(relay); } # requests for my domain if (is_method(\u0026#34;PUBLISH|SUBSCRIBE\u0026#34;)) { sl_send_reply(503, \u0026#34;Service Unavailable\u0026#34;); exit; } # check if the clients are using WebSockets or WebSocketSecure if ( $socket_in(proto) == \u0026#34;WS\u0026#34;|| $socket_in(proto) == \u0026#34;WSS\u0026#34;) setflag(\u0026#34;SRC_WS\u0026#34;); # consider the client is behind NAT - always fix the contact #fix_nated_contact(); xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main-1-:$rm|$rs|$tu|$socket_in(port)|$hdr(contact)\\n\u0026#34;); if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); fix_nated_register(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error(); exit; } xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main--:$rm|$rs|$tu|$socket_in(port)|$hdr(contact)\\n\u0026#34;); if ($rU==NULL) { # request with no Username in RURI sl_send_reply(484,\u0026#34;Address Incomplete\u0026#34;); exit; } if (is_method(\u0026#34;INVITE\u0026#34;) \u0026amp;\u0026amp; !has_totag()) { topology_hiding(); } # do lookup with method filtering if (!lookup(\u0026#34;location\u0026#34;,\u0026#34;m\u0026#34;)) { $ru = \u0026#34;sip:172.16.4.114:5080\u0026#34;; $socket_out = \u0026#34;udp:172.16.4.111:5361\u0026#34;; } #if (!lookup(\u0026#34;location\u0026#34;,\u0026#34;m\u0026#34;)) { # t_newtran(); # t_reply(404, \u0026#34;Not Found\u0026#34;); # exit; #} route(relay); } route[relay] { # for INVITEs enable some additional helper routes if (is_method(\u0026#34;INVITE\u0026#34;)) { t_on_branch(\u0026#34;handle_nat\u0026#34;); t_on_reply(\u0026#34;handle_nat\u0026#34;); } else if (is_method(\u0026#34;BYE|CANCEL\u0026#34;)) { rtpengine_delete(); } if (!t_relay()) { send_reply(500,\u0026#34;Internal Error\u0026#34;); }; exit; } branch_route[handle_nat] { if (!is_method(\u0026#34;INVITE\u0026#34;) || !has_body(\u0026#34;application/sdp\u0026#34;)) return; $var(rtp_flag) = \u0026#34;replace-origin \u0026#34;; if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) { #web-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; ICE=force-relay DTLS=passive\u0026#34;; } else if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)){ #web-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; codec-strip-G722 codec-strip-CN codec-strip-red strip-extmap rtcp-mux-demux DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; } else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) {#sip-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force RTP/SAVPF\u0026#34;; } else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; rtpengine_offer(\u0026#34;$var(rtp_flag)\u0026#34;); } onreply_route[handle_nat] { fix_nated_contact(); if (!has_body(\u0026#34;application/sdp\u0026#34;)) return; $var(rtp_flag) = \u0026#34;replace-origin \u0026#34;; if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) #web-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; ICE=force-relay DTLS=passive\u0026#34;; else if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #web-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; codec-strip-G722 codec-strip-CN codec-strip-red codec-strip-opus rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force\u0026#34;; else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=remove RTP/AVP\u0026#34;; else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; rtpengine_answer(\u0026#34;$var(rtp_flag)\u0026#34;); } 对比两份配置,可以看出在has_totag内的处理有些差异，也就是软电话收到200OK,返回ACK之后的处理， 使用了topology_hiding,软电话返回的ACK里没有Route,所以就不需要使用loose_route, 直接使用topology_hiding_match来解析链路转发。\n实际使用示例 完整通话信令图: INVITE到被代理方(114机器) 正常sip 隐藏sip 可以看到Record-Route被隐藏了, Via隐藏了软电话的地址。\nContact替换成了发送到被代理方请求出口的ip和port。 Contact内隐藏的一些其他信息按照base64方式存到了customparam, 可以看到数据还是很长。\n被代理方返回200OK 因为183和200ok的头差别不大，所以以200OK为例：\n正常sip 隐藏sip 在使用topology_hiding时，被代理方因为收到的INVITE信令中没有Record-Route,所以返回200OK也不会有。\nopensips返回200OK 正常sip 隐藏sip 在使用topology_hiding时，opensips把软电话的地址补充到了Via, Contact修改成了opensip出口的ip和port.\n软电话返回ACK 正常sip 隐藏sip 在使用topology_hiding时, 因为返回的200OK,没有Record-Route,所以软电话返回的ACK也就没有Route。\n被代理方返回BYE 正常sip 隐藏sip 在使用topology_hiding时, 因为收到的INVITE,没有Record-Route,所以被代理方发送BYE也就没有Record-Route。 Via使用的是INVITE带的Via。\nopensips返回BYE 正常sip 隐藏sip 在使用topology_hiding时, 修改了Via为出口ip和port.\n软电话返回200OK 正常sip 隐藏sip opensips返回200OK 正常sip 隐藏sip 在使用topology_hiding时, 修改了Via为被代理方的ip和port.\ntopology_hiding 参数示例 U:用户名补充到contact中 1 topology_hiding(\u0026#34;U\u0026#34;); 往被代理方发送INVITE,效果： topology_hiding(\u0026quot;U\u0026quot;)会补充用户名1002到contact中\nD:把DID补充到Contact用户名中 1 2 modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;force_dialog\u0026#34;, 1) topology_hiding(\u0026#34;D\u0026#34;); 往被代理方发送INVITE,效果： C:对Call-id编码 1 2 modparam(\u0026#34;topology_hiding\u0026#34;, \u0026#34;force_dialog\u0026#34;, 1) topology_hiding(\u0026#34;C\u0026#34;); 往被代理方发送INVITE,效果： call-id会被编码，导致和软电话请求过来的call-id不一致。\na/A: 目前并未看到效果.\n","date":"2025-02-26T10:15:32+08:00","image":"https://QuincyGao.github.io/p/topology_hiding%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/11_hu8978428634062723750.jpg","permalink":"https://QuincyGao.github.io/p/topology_hiding%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/","title":"topology_hiding模块介绍"},{"content":"使用场景 registrar和mid_registrar都是用来存储用户注册信息的模块，mid_registrar主要是充当注册中间件，需要代理转发, 另外也可以降低被代理方的注册请求的次数。registrar模块也支持代理转发，但是不能拦截注册请求到被代理方。\n两个模块的数据都缓存在usrloc里。\n使用示例 opensips版本:\nopensips 3.3.10 (x86_64/linux)\nregistrar 重要参数介绍 default_expires: 默认注册过期时间,单位秒 min_expires: 最小注册过期时间,Contact中的过期时间小于此值，会被设置为此值,单位秒 max_expires: 最大注册过期时间,Contact中的过期时间大于此值，会被设置为此值,单位秒 tcp_presentent_flag: 此参数会设置tcp连接的生命周期为contact的过期时间，如果设置为-1，则不设置。 received_avp: 存储received字段的avp，常常和nathelper模块一起使用. recevied_param: 设置200OK信令的Contact中的received字段,默认为received max_contacts: 限制每个用户最大注册数的contact,超过会报错5xx。 代理配置示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 socket=udp:172.16.4.111:5360 socket=tcp:172.16.4.111:5360 socket=udp:172.16.4.111:5361 loadmodule \u0026#34;usrloc.so\u0026#34; loadmodule \u0026#34;registrar.so\u0026#34; loadmodule \u0026#34;nathelper.so\u0026#34; modparam(\u0026#34;registrar|nathelper\u0026#34;, \u0026#34;received_avp\u0026#34;, \u0026#34;$avp(rcv)\u0026#34;) modparam(\u0026#34;registrar\u0026#34;, \u0026#34;default_expires\u0026#34;, 1800) modparam(\u0026#34;registrar\u0026#34;, \u0026#34;tcp_persistent_flag\u0026#34;, \u0026#34;TCP_PERSIST_DURATION\u0026#34;) route { ... if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); fix_nated_register(); if (!save(\u0026#34;location\u0026#34;,\u0026#34;rfc1\u0026#34;)) sl_reply_error(); if ($socket_in(proto) == \u0026#34;tcp\u0026#34;) { setflag(\u0026#34;TCP_PERSIST_DURATION\u0026#34;); xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main-1-:$rm|$tu|$socket_in(port)|$socket_in(proto)\\n\u0026#34;); } $socket_out = \u0026#34;udp:172.16.4.111:5361\u0026#34;; sethostport(\u0026#34;172.16.4.114:5060\u0026#34;); if (!t_relay()) { send_reply(500, \u0026#34;Internal Error\u0026#34;); } exit; } if (!lookup(\u0026#34;location\u0026#34;,\u0026#34;m\u0026#34;)) { t_newtran(); t_reply(404, \u0026#34;Not Found\u0026#34;); exit; } route(relay); } 坐席的信令图： save(\u0026quot;location\u0026quot;,\u0026quot;rfc1\u0026quot;): rfc1 表示usrloc一个用户只保存一个Contact信息,这样在webrtc连接中，及时更新往新的连接发送请求地址。\n如果opensips中坐席过期时间小于被代理方，opensips过期之后不会重新往被代理方发送注册请求。\nmid_registrar 代理配置示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 socket=udp:172.16.4.111:5326 socket=udp:172.16.4.111:5360 socket=tcp:172.16.4.111:5360 socket=udp:172.16.4.111:5361 loadmodule \u0026#34;mid_registrar.so\u0026#34; modparam(\u0026#34;mid_registrar\u0026#34;, \u0026#34;mode\u0026#34;, 0) modparam(\u0026#34;mid_registrar|nathelper\u0026#34;, \u0026#34;received_avp\u0026#34;, \u0026#34;$avp(rcv)\u0026#34;) modparam(\u0026#34;mid_registrar\u0026#34;, \u0026#34;outgoing_expires\u0026#34;, 80) modparam(\u0026#34;mid_registrar\u0026#34;, \u0026#34;tcp_persistent_flag\u0026#34;, \u0026#34;TCP_PERSIST_REGISTRATIONS\u0026#34;) modparam(\u0026#34;mid_registrar\u0026#34;, \u0026#34;max_expires\u0026#34;, 130) modparam(\u0026#34;mid_registrar\u0026#34;, \u0026#34;attr_avp\u0026#34;, \u0026#34;$avp(attr)\u0026#34;) route { ... if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); #fix_nated_register(); mid_registrar_save(\u0026#34;location\u0026#34;); switch ($retcode) { case 1: if ($socket_in(proto) == \u0026#34;tcp\u0026#34;) { setflag(\u0026#34;TCP_PERSIST_REGISTRATIONS\u0026#34;); xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main-1-:$rm|$tu|$socket_in(port)|$socket_in(proto)\\n\u0026#34;); } $socket_out = \u0026#34;udp:172.16.4.111:5361\u0026#34;; $ru = \u0026#34;sip:172.16.4.114:5060\u0026#34;; if (!t_relay()) { send_reply(500, \u0026#34;Internal Error\u0026#34;); } break; case 2: xlog(\u0026#34;L_INFO\u0026#34;, \u0026#34;REGISTER has been absorbed!\\n\u0026#34;); break; default: xlog(\u0026#34;L_ERR\u0026#34;, \u0026#34;mid-registrar error!\\n\u0026#34;); send_reply(500, \u0026#34;Server Internal Error 2\u0026#34;); } exit; } } mode = 0 当outgoing_expires大于max_expires时： 能够得出的结论为：\n软电话的Expires:200, opensips的过期时间为:130,此时发送给114的Expires为200. 114保存的过期时间为200, 而opensips保存的过期时间为130，返回给软电话的过期时间为130. 软电话130s过期之后，会重新发送Register，此时opensips会转发请求给114机器。 当outgoing_expires小于max_expires时： mode = 1 当outgoing_expires 比opensips的max_expires很大时： sip信息： 能够得出的结论为：\nopensips保存的expires为80， 被代理方114机器保存的expires为:outgoing_expires 当软电话的过期时间到了之后，opensips不会再转发请求到114. 当outgoing_expires 比opensips的max_expires较大时： sip信息： 能够看到，opensips内部应该有对被代理方Expires的计数器，当收到软电话的注册信息时，如果被代理方的过期时间还很长，便不会转发请求到被代理方，时间较短时，会把注册请求重新转发给被代理方。\n当outgoing_expires小于max_expires时： 此时可以看到软电话过期时，opensips会转发请求到被代理方。\nmode = 2 当outgoing_expires很大时： 和mode=1 情况一样\n当outgoing_expires大于max_expires时： 114上的坐席过期之后，opensips不会再往114转发请求。\n当outgoing_expires小于max_expires时： sip信息： 此时，被代理方114机器的过期时间到了之后，坐席信息被删除，之后的REGISTER并未再转发到114机器上，导致114机器上一直都没有坐席的信息。\n总结 mode=0 时，被代理方的过期时间和软电话传的一致, opensips的过期时间为max_expires时间。 mode=1 时，被代理方的过期时间和outgoing_expires时间一致，opensips过期时间为max_expires时间。 mode=2 时，opensips不会再转发REGISTER到114机器上，即使被代理方的坐席过期。 ","date":"2025-02-24T11:34:47+08:00","image":"https://QuincyGao.github.io/p/registrar%E5%92%8Cmid_registrar%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/9_hu12160269104167841556.jpg","permalink":"https://QuincyGao.github.io/p/registrar%E5%92%8Cmid_registrar%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/","title":"registrar和mid_registrar模块介绍"},{"content":"背景 最近在使用opensips的wss模块，前端使用jssip封装webrtc。\n正式环境中web前端不会开启console打印webrtc交互信令，当需要排查问题时，此时会变得异常困难。\n世面上能用的工具都试过了,不管是sngrep还是wireshark抓包，都无法解析wss信令(wireshark即便是有tls的公私钥,也无法解析)。\nssldump 一方面没有centos的包，需要用容器做镜像(如果感兴趣后续可以介绍)，另一方面，它必须从建立连接时开始抓包，无法抓到建立连接之后的信令。\nopensips的tracer模块，就能很好解决这个问题。官方文档：tracer模块\nopensips的版本信息：\nopensips 3.3.10 (x86_64/linux)\ntrace设置方式 trace_id的设置主要有4个方式： 写DB\nmodparam(\u0026quot;tracer\u0026quot;, \u0026quot;trace_id\u0026quot;,\u0026quot;[tid]uri=mysql://xxxx:xxxx@10.10.10.10/opensips;table=sip_trace;\u0026quot;) 这个会直接把数据插入到数据表sip_trace中,这个opensip的DB默认表已有此表结构。\n写文件\nmodparam(\u0026quot;tracer\u0026quot;, \u0026quot;trace_id\u0026quot;,\u0026quot;[tid]uri=file:/tmp/trace.log\u0026quot;) 这个会直接把数据写入到文件/tmp/trace.log中，需要设置file_mode\n写入hep_server端\nmodparam(\u0026quot;tracer\u0026quot;, \u0026quot;trace_id\u0026quot;,\u0026quot;[tid]uri=hep://10.10.10.10:xxxx\u0026quot;) 或者 modparam(\u0026quot;tracer\u0026quot;, \u0026quot;trace_id\u0026quot;, \u0026quot;[tid]uri=hep:hid\u0026quot;)\n写入syslog\nmodparam(\u0026quot;tracer\u0026quot;, \u0026quot;trace_id\u0026quot;,\u0026quot;[tid]uri=syslog:local0:-1\u0026quot;)\n调用trace功能 官方接口介绍：\n1 trace(trace_id, [scope], [type], [trace_attrs], [flags], [correlation_id]) 主要参数说明：\nscope\n\u0026rsquo;m/M\u0026rsquo; 无状态模式下，追踪消息 \u0026rsquo;t/T\u0026rsquo; tm模块如果没加载，追踪事务，包括 in和out的请求以及内部的回复 \u0026rsquo;d/D\u0026rsquo; 追踪dialog \u0026lsquo;b/B\u0026rsquo; 追踪B2B信息 type\nsip 追踪sip信令 xlog 追踪xlog里的信息(dialog, transaction, B2B) rest 追踪rest 接口信息 实战配置 统一调用方法：\n1 2 3 4 5 6 if (is_method(\u0026#34;REGISTER\u0026#34;)) { trace(\u0026#34;tid\u0026#34;, \u0026#34;t\u0026#34;,\u0026#34;sip\u0026#34;); } if (is_method(\u0026#34;INVITE\u0026#34;) \u0026amp;\u0026amp; !has_totag())) { trace(\u0026#34;tid\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;sip\u0026#34;); } 写DB 配置:\n1 2 3 loadmodule \u0026#34;db_mysql.so\u0026#34; loadmodule \u0026#34;tracer.so\u0026#34; modparam(\u0026#34;tracer\u0026#34;, \u0026#34;trace_id\u0026#34;,\u0026#34;[tid]uri=mysql://opensips:opensipsrw@172.16.3.121:3306/opensips;table=sip_trace;\u0026#34;) 此时就可以在数据表sip_trace中查看到trace信息了。 写文件 配置:\n1 2 3 loadmodule \u0026#34;tracer.so\u0026#34; modparam(\u0026#34;tracer\u0026#34;, \u0026#34;trace_id\u0026#34;,\u0026#34;[tid]uri=file:/tmp/trace.log\u0026#34;) modparam(\u0026#34;tracer\u0026#34;, \u0026#34;file_mode\u0026#34;, \u0026#34;0644\u0026#34;) 此时就可以在/tmp/trace.log文件中查看到trace信息了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 in wss 2025-02-21 11:05:20 172.16.80.21:37885 -\u0026gt; 172.16.4.113:9443 REGISTER sip:172.16.4.113:9443 SIP/2.0 Via: SIP/2.0/WSS n98f6pr114j5.invalid;branch=z9hG4bK1737010 Max-Forwards: 68 To: \u0026lt;sip:88880022@172.16.4.113:9443\u0026gt; From: \u0026#34;88880022\u0026#34; \u0026lt;sip:88880022@172.16.4.113:9443\u0026gt;;tag=v68n10kvr9 Call-ID: l013jm5gns5uk30rlpe8ht CSeq: 18 REGISTER X-SBC: Dinstar Mediant Contact: \u0026lt;sip:88880022@n98f6pr114j5.invalid;transport=ws\u0026gt;;+sip.ice;reg-id=1;+sip.instance=\u0026#34;\u0026lt;urn:uuid:a17d9354-7175-46b9-a17a-d86a73ebb150\u0026gt;\u0026#34;;expires=600 Expires: 600 Authorization: Digest algorithm=MD5, username=\u0026#34;88880022\u0026#34;, realm=\u0026#34;huawei\u0026#34;, nonce=\u0026#34;856ef8e5f85686a917325343ffe6f9bd\u0026#34;, uri=\u0026#34;sip:172.16.4.113:9443\u0026#34;, response=\u0026#34;5b9367e936dcdb9464b2793fdd849bc9\u0026#34; Allow: INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY,SUBSCRIBE Supported: path,gruu,outbound User-Agent: Dinstar WebRTC SDK. Simple phone 1.17.0 Chrome/133 Content-Length: 0 out udp 2025-02-21 11:05:20 172.16.4.113:5263 -\u0026gt; 172.16.7.208:5060 REGISTER sip:172.16.7.208:5060 SIP/2.0 Via: SIP/2.0/UDP 172.16.4.113:5263;branch=z9hG4bKaa1c.91292206.0;i=cf637872 Via: SIP/2.0/WSS n98f6pr114j5.invalid;received=172.16.80.21;branch=z9hG4bK1737010 Max-Forwards: 68 To: \u0026lt;sip:88880022@172.16.4.113:9443\u0026gt; From: \u0026#34;88880022\u0026#34; \u0026lt;sip:88880022@172.16.4.113:9443\u0026gt;;tag=v68n10kvr9 Call-ID: l013jm5gns5uk30rlpe8ht CSeq: 18 REGISTER X-SBC: Dinstar Mediant Contact: \u0026lt;sip:88880022@172.16.4.113:5263\u0026gt;;expires=600 Expires: 600 Authorization: Digest algorithm=MD5, username=\u0026#34;88880022\u0026#34;, realm=\u0026#34;huawei\u0026#34;, nonce=\u0026#34;856ef8e5f85686a917325343ffe6f9bd\u0026#34;, uri=\u0026#34;sip:172.16.4.113:9443\u0026#34;, response=\u0026#34;5b9367e936dcdb9464b2793fdd849bc9\u0026#34; Allow: INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY,SUBSCRIBE Supported: path,gruu,outbound User-Agent: Dinstar WebRTC SDK. Simple phone 1.17.0 Chrome/133 Content-Length: 0 写入hep_server端 本次测试使用的是 hep-server：hep-connect\nweb前端显示：siphub\n配置:\n1 2 3 4 5 socket=hep_udp:172.16.4.113:6000 loadmodule \u0026#34;tracer.so\u0026#34; loadmodule \u0026#34;proto_hep.so\u0026#34; modparam(\u0026#34;proto_hep\u0026#34;, \u0026#34;hep_id\u0026#34;,\u0026#34;[hid] 172.16.4.111:9060;transport=udp;version=3\u0026#34;) modparam(\u0026#34;tracer\u0026#34;, \u0026#34;trace_id\u0026#34;,\u0026#34;[tid]uri=hep:hid\u0026#34;) socket是opensips 客户端发送proto_hep数据的端口 hep_id是hep_server的监听端口 此时打开siphub的web页面：http://172.0.0.1:3000/ 可以看到: 点击Call-ID 可以看到详细的sip信令信息: 写入syslog 1 2 3 4 5 6 7 8 log_level=3 xlog_level=4 log_stderror=no log_facility=LOG_LOCAL0 loadmodule \u0026#34;tracer.so\u0026#34; modparam(\u0026#34;tracer\u0026#34;, \u0026#34;syslog_default_facility\u0026#34;,\u0026#34;LOG_LOCAL0\u0026#34;) modparam(\u0026#34;tracer\u0026#34;, \u0026#34;syslog_default_level\u0026#34;, 4) modparam(\u0026#34;tracer\u0026#34;, \u0026#34;trace_id\u0026#34;,\u0026#34;[tid]uri=syslog\u0026#34;) 这个功能暂时未测成功，opensips的日志输出到syslog,但是在日志中未看到trace信息。\n总结 通过上述的方法，可以看到很容易跟踪sip信令。\n如果需要对opensips做监控，那么使用hep-server是比较合适的选择。 临时性排查问题，一般的sip传送方式tcp/udp/ws，使用sngrep都能搞定。 针对wss信令，使用trace写文件，可能是比较轻量的选择。 ","date":"2025-02-21T11:33:22+08:00","image":"https://QuincyGao.github.io/p/tracer%E6%A8%A1%E5%9D%97/8_hu14940933373703095982.jpg","permalink":"https://QuincyGao.github.io/p/tracer%E6%A8%A1%E5%9D%97/","title":"tracer模块"},{"content":"NAT 协议 NAT协议参考：RFC 2663\nNAT For TCP: RFC 5382\nNAT For UDP: RFC 4787\n在介绍opensips的这两个模块使用之前，我们需要先了解一下NAT相关的概念。 NAT (Network Address Translation),网络地址转换，是一种网络地址转换技术， 主要是将内部的私有IP地址转换为公共IP地址，使得外部网络能够访问到内部的私有网络。\nNAT 类型 静态NAT 一个公网IP对应一个私网IP，一对一转换，仅支持地址转换，不支持端口映射。 需要维护一个公共的地址池,目前已经不再使用。\nNAPT 目前说的NAT基本上指的就是NAPT了，NAPT使用端口多路复用技术，不但要地址ip转换，还要端口映射。 主要有以下几类：\nFull Cone NAT(完全锥形NAT) 特点：ip和port都不设限. 场景： client 发送数据包给server1, 通过NAT设备完成192.168.0.1:3000\u0026lt;\u0026ndash;\u0026gt;1.2.3.4:6000的映射。\nserver1收到数据包后，可以往1.2.3.4:6000发送数据包，server2也能往1.2.3.4:6000发送数据包。\nRestricted Cone NAT(限制锥形NAT) 特点：ip设限，port不设限. 场景： client 发送数据包给server1, 通过NAT设备完成192.168.0.1:3000\u0026lt;\u0026ndash;\u0026gt;1.2.3.4:6000的映射。\nserver1收到数据包后，往1.2.3.4:6000发送数据包，此时NAT允许该server1通过数据。\n但是client没有往server2发送数据，所以server2不能通过NAT设备1.2.3.4:6000发送数据包。\nPort Restricted Cone NAT(端口限制锥形NAT) 特点：IP和port都受限. 场景： client 发送数据包给server1, 通过NAT设备完成192.168.0.1:3000\u0026lt;\u0026ndash;\u0026gt;1.2.3.4:6000的映射。\nserver1收到数据包后，往1.2.3.4:6000发送数据包，此时NAT允许该server1通过数据。\n但是server1的其他端口(除了4000)，都不允许通过NAT设备发送数据包，server2更不允许。\nSymmetric NAT(对称NAT) 特点:对每个外部主机或端口的会话都会映射为不同的端口 client 发送数据包给server1, 通过NAT设备完成192.168.0.1:3000\u0026lt;\u0026ndash;\u0026gt;1.2.3.4:6000的映射。\nserver1的4000收到数据包后，往1.2.3.4:6000发送数据包，此时NAT允许该server1通过数据。\nclient 发送数据包给server1, 通过NAT设备完成192.168.0.1:3000\u0026lt;\u0026ndash;\u0026gt;1.2.3.4:6001的映射。\nserver1端4001收到数据包后，往1.2.3.4:6001发送数据包，此时NAT允许该server1通过数据\nserver端只有client发送过数据的数据包，NAT才允许通过，并且NAT的端口映射会不一样。\nNAT_TRAVERSAL 和 NATHELPER 介绍 这两个模块都是针对Client的NAT而设计的，一方面是让client知道自己的外网ip和port, 另一方面记录此NAT的ip和port，用于回复信令。\n需要注意的是这两个模块无法让client知道opensips服务端信令和媒体的外网ip和port\nNATHELPER的使用场景比NAT_TRAVERSAL要简单，但是功能更多。\n功能 NATHELPER NAT_TRAVERSAL 支持设置ping间隔 √ √ 支持设置ping方法 √ √ 支持修改ping发出去的端口 √ x 支持tcp方式的ping √ x 修改Register的Contact fix_nated_register fix_contact 修改Invite的Contact fix_nated_contact fix_contact 修改sdp的o=ip fix_nated_sdp x 开始执行ping方法 sipping_bflag / ping_nated_only nat_keepalive 为啥需要ping? 当client通过NAT发送请求到opensips,为了保持连接，需要往NAT链路上发送ping包， 可以是OPTIONS也可以是INFO，能够保证NAT链路一直处于活动状态。\n模块使用示例 opensips版本\nopensips 3.3.10 (x86_64/linux)\nNAT_TRAVERSAL 完整配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 ###### Global Parameters ######### xlog_level=4 #debug_mode=yes log_stderror=yes #stderror_enabled=yes #syslog_facility=LOG_LOCAL0 log_facility=LOG_LOCAL0 advertised_address=116.198.229.200 socket=udp:172.16.0.3:5271 socket=udp:172.16.0.3:5272 ####### Modules Section ######## # set module path mpath=\u0026#34;/usr/local/lib64/sbc/modules/\u0026#34; #### SIGNALING module loadmodule \u0026#34;signaling.so\u0026#34; loadmodule \u0026#34;db_mysql.so\u0026#34; #### StateLess module loadmodule \u0026#34;sl.so\u0026#34; #### Transaction Module loadmodule \u0026#34;tm.so\u0026#34; modparam(\u0026#34;tm\u0026#34;, \u0026#34;fr_timeout\u0026#34;, 5) modparam(\u0026#34;tm\u0026#34;, \u0026#34;fr_inv_timeout\u0026#34;, 30) modparam(\u0026#34;tm\u0026#34;, \u0026#34;restart_fr_on_each_reply\u0026#34;, 0) modparam(\u0026#34;tm\u0026#34;, \u0026#34;onreply_avp_mode\u0026#34;, 1) #### Record Route Module loadmodule \u0026#34;rr.so\u0026#34; modparam(\u0026#34;rr\u0026#34;, \u0026#34;append_fromtag\u0026#34;, 0) #### MAX ForWarD module loadmodule \u0026#34;maxfwd.so\u0026#34; #### SIP MSG OPerationS module loadmodule \u0026#34;sipmsgops.so\u0026#34; #### FIFO Management Interface loadmodule \u0026#34;mi_fifo.so\u0026#34; modparam(\u0026#34;mi_fifo\u0026#34;, \u0026#34;fifo_name\u0026#34;, \u0026#34;/tmp/opensips_fifo\u0026#34;) modparam(\u0026#34;mi_fifo\u0026#34;, \u0026#34;fifo_mode\u0026#34;, 0666) loadmodule \u0026#34;httpd.so\u0026#34; loadmodule \u0026#34;mi_http.so\u0026#34; modparam(\u0026#34;httpd\u0026#34;,\u0026#34;port\u0026#34;,9998) #### USeR LOCation module loadmodule \u0026#34;usrloc.so\u0026#34; modparam(\u0026#34;usrloc\u0026#34;, \u0026#34;nat_bflag\u0026#34;, \u0026#34;NAT\u0026#34;) #### REGISTRAR module loadmodule \u0026#34;registrar.so\u0026#34; #### RTPengine protocol loadmodule \u0026#34;rtpengine.so\u0026#34; modparam(\u0026#34;rtpengine\u0026#34;, \u0026#34;rtpengine_sock\u0026#34;, \u0026#34;udp:172.16.0.3:22222\u0026#34;) #### Nathelper protocol #loadmodule \u0026#34;nathelper.so\u0026#34; #modparam(\u0026#34;registrar|nathelper\u0026#34;, \u0026#34;received_avp\u0026#34;, \u0026#34;$avp(rcv)\u0026#34;) #### UDP protocol loadmodule \u0026#34;proto_udp.so\u0026#34; loadmodule \u0026#34;nat_traversal.so\u0026#34; loadmodule \u0026#34;dialog.so\u0026#34; modparam(\u0026#34;nat_traversal\u0026#34;, \u0026#34;keepalive_interval\u0026#34;, 10) modparam(\u0026#34;nat_traversal\u0026#34;, \u0026#34;keepalive_method\u0026#34;, \u0026#34;OPTIONS\u0026#34;) modparam(\u0026#34;nat_traversal\u0026#34;, \u0026#34;keepalive_from\u0026#34;, \u0026#34;sip:keepalive@my-domain.com\u0026#34;) ####### Routing Logic ######## # main request routing logic route{ if (!mf_process_maxfwd_header(10)) { sl_send_reply(483,\u0026#34;Too Many Hops\u0026#34;); exit; } if (has_totag()) { # sequential requests within a dialog should # take the path determined by record-routing if (loose_route()) { if (is_method(\u0026#34;INVITE\u0026#34;)) { # even if in most of the cases is useless, do RR for # re-INVITEs alos, as some buggy clients do change route set # during the dialog. record_route(); } # route it out to whatever destination was set by loose_route() # in $du (destination URI). route(relay); } else { if ( is_method(\u0026#34;ACK\u0026#34;) ) { if ( t_check_trans() ) { # non loose-route, but stateful ACK; must be an ACK after # a 487 or e.g. 404 from upstream server t_relay(); exit; } else { # ACK without matching transaction -\u0026gt; # ignore and discard exit; } } sl_send_reply(404,\u0026#34;Not here\u0026#34;); } exit; } # CANCEL processing if (is_method(\u0026#34;CANCEL\u0026#34;)) { if (t_check_trans()) t_relay(); exit; } t_check_trans(); #if (!is_method(\u0026#34;REGISTER\u0026#34;)) { #\tif (is_myself(\u0026#34;$fd\u0026#34;)) { #\t# if caller is not local, then called number must be local #\tif (!is_myself(\u0026#34;$rd\u0026#34;)) { #\tsend_reply(403,\u0026#34;Rely forbidden\u0026#34;); #\texit; #\t} #\t} #} # preloaded route checking if (loose_route()) { xlog(\u0026#34;L_ERR\u0026#34;, \u0026#34;Attempt to route with preloaded Route\u0026#39;s [$fu/$tu/$ru/$ci]\u0026#34;); if (!is_method(\u0026#34;ACK\u0026#34;)) sl_send_reply(403,\u0026#34;Preload Route denied\u0026#34;); exit; } # record routing if (!is_method(\u0026#34;REGISTER|MESSAGE\u0026#34;)) record_route(); if (!is_myself(\u0026#34;$rd\u0026#34;)) { append_hf(\u0026#34;P-hint: outbound\\r\\n\u0026#34;); route(relay); } # requests for my domain if (is_method(\u0026#34;PUBLISH|SUBSCRIBE\u0026#34;)) { sl_send_reply(503, \u0026#34;Service Unavailable\u0026#34;); exit; } # check if the clients are using WebSockets or WebSocketSecure if ( $socket_in(proto) == \u0026#34;WS\u0026#34;|| $socket_in(proto) == \u0026#34;WSS\u0026#34;) setflag(\u0026#34;SRC_WS\u0026#34;); # consider the client is behind NAT - always fix the contact #fix_nated_contact(); xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main-1-:$rm|$rs|$tu|$socket_in(port)|$var(contact)\\n\u0026#34;); if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); #fix_nated_register(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error(); exit; } xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---main--:$rm|$rs|$tu|$socket_in(port)|$var(contact)\\n\u0026#34;); if ($rU==NULL) { # request with no Username in RURI sl_send_reply(484,\u0026#34;Address Incomplete\u0026#34;); exit; } # do lookup with method filtering if (!lookup(\u0026#34;location\u0026#34;,\u0026#34;m\u0026#34;)) { t_newtran(); t_reply(404, \u0026#34;Not Found\u0026#34;); exit; } route(relay); } route[relay] { # for INVITEs enable some additional helper routes if (is_method(\u0026#34;INVITE\u0026#34;)) { t_on_branch(\u0026#34;handle_nat\u0026#34;); t_on_reply(\u0026#34;handle_nat\u0026#34;); } else if (is_method(\u0026#34;BYE|CANCEL\u0026#34;)) { rtpengine_delete(); } if (!t_relay()) { send_reply(500,\u0026#34;Internal Error\u0026#34;); }; exit; } branch_route[handle_nat] { if (!is_method(\u0026#34;INVITE\u0026#34;) || !has_body(\u0026#34;application/sdp\u0026#34;)) return; $var(rtp_flag) = \u0026#34;replace-origin \u0026#34;; if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) { #web-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; ICE=force-relay DTLS=passive\u0026#34;; } else if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)){ #web-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; codec-strip-G722 codec-strip-CN codec-strip-red strip-extmap rtcp-mux-demux DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; } else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) {#sip-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force RTP/SAVPF\u0026#34;; } else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; rtpengine_offer(\u0026#34;$var(rtp_flag)\u0026#34;); } onreply_route[handle_nat] { #fix_nated_contact(); if (!has_body(\u0026#34;application/sdp\u0026#34;)) return; $var(rtp_flag) = \u0026#34;replace-origin \u0026#34;; if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) #web-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; ICE=force-relay DTLS=passive\u0026#34;; else if (isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #web-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; codec-strip-G722 codec-strip-CN codec-strip-red codec-strip-opus rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force\u0026#34;; else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;web $var(rtp_flag) = $var(rtp_flag) + \u0026#34; rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=remove RTP/AVP\u0026#34;; else if (!isflagset(\u0026#34;SRC_WS\u0026#34;) \u0026amp;\u0026amp; !isbflagset(\u0026#34;DST_WS\u0026#34;)) #sip-\u0026gt;sip $var(rtp_flag) = $var(rtp_flag) + \u0026#34; DTLS=off SDES-off ICE=remove RTP/AVP\u0026#34;; rtpengine_answer(\u0026#34;$var(rtp_flag)\u0026#34;); } 以上的配置并没有开启NAT的ping和fix_contact,它的效果就是：\n使用MicroSIP软电话通过udp:116.198.229.200:5271注册用户1001, 通过opensips-cli客户端执行mi ul_dump, 能够看到注册信息为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \u0026#34;Domains\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;location\u0026#34;, \u0026#34;hash_size\u0026#34;: 512, \u0026#34;AORs\u0026#34;: [ { \u0026#34;AOR\u0026#34;: \u0026#34;1007\u0026#34;, \u0026#34;Contacts\u0026#34;: [ { \u0026#34;Contact\u0026#34;: \u0026#34;sip:1007@172.16.80.21:58364;ob\u0026#34;, \u0026#34;ContactID\u0026#34;: \u0026#34;3784571799363132468\u0026#34;, \u0026#34;Expires\u0026#34;: 299, \u0026#34;Q\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Callid\u0026#34;: \u0026#34;f3c3991a65404450959d7f899fae1d80\u0026#34;, \u0026#34;Cseq\u0026#34;: 30781, \u0026#34;User-agent\u0026#34;: \u0026#34;MicroSIP/3.21.6\u0026#34;, \u0026#34;State\u0026#34;: \u0026#34;CS_NEW\u0026#34;, \u0026#34;Flags\u0026#34;: 0, \u0026#34;Cflags\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Socket\u0026#34;: \u0026#34;udp:172.16.0.3:5271\u0026#34;, \u0026#34;Methods\u0026#34;: 8063 } ] } ] } ] } 注册的sip为： 可以看到client的NAT是113.104.238.248:2717, 但是opensips保存的contact为sip:1007@172.16.80.21:58364;ob, 这个是软电话的内网ip, 两个不同内网的软电话通过opensips相互拨打，会不通。\nfix_contact() 那么如何修改呢？在save之前，收到Register信令就调用fix_contact(), 具体为：\n1 2 3 4 5 6 7 8 9 10 11 if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); fix_contact(); #fix_nated_register(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error(); exit; } 此时，opensips-cli执行mi ul_dump, opensips保存的location为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \u0026#34;Domains\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;location\u0026#34;, \u0026#34;hash_size\u0026#34;: 512, \u0026#34;AORs\u0026#34;: [ { \u0026#34;AOR\u0026#34;: \u0026#34;1007\u0026#34;, \u0026#34;Contacts\u0026#34;: [ { \u0026#34;Contact\u0026#34;: \u0026#34;sip:1007@113.104.238.248:2717;ob\u0026#34;, \u0026#34;ContactID\u0026#34;: \u0026#34;3784571799363126326\u0026#34;, \u0026#34;Expires\u0026#34;: 297, \u0026#34;Q\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Callid\u0026#34;: \u0026#34;62ec515e2ece4564b3388035343fee32\u0026#34;, \u0026#34;Cseq\u0026#34;: 16774, \u0026#34;User-agent\u0026#34;: \u0026#34;MicroSIP/3.21.6\u0026#34;, \u0026#34;State\u0026#34;: \u0026#34;CS_NEW\u0026#34;, \u0026#34;Flags\u0026#34;: 0, \u0026#34;Cflags\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Socket\u0026#34;: \u0026#34;udp:172.16.0.3:5271\u0026#34;, \u0026#34;Methods\u0026#34;: 8063 } ] } ] } ] } 能够看到Contact信息改为了NAT的IP地址和port\nnat_keepalive 在fix_contact位置添加nat_keepalive();，配置如下:\n1 2 3 4 5 6 7 8 9 10 11 12 if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;); fix_contact(); nat_keepalive(); #fix_nated_register(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error(); exit; } 重启服务后，能够看到每10s会往client的NAT 发送OPTIONS信令。 本地发出端口用的是.cfg里第一个默认的socket=协议，这块不能更改. 软电话坐席退出，ping还会执行的次数为：4min/keepalive_interval。 这个4分钟 目前没找到哪里配置，是实际测试的结果。\nNATHELPER 配置：\n1 2 3 4 5 6 7 8 9 10 loadmodule \u0026#34;nathelper.so\u0026#34; modparam(\u0026#34;registrar|nathelper\u0026#34;, \u0026#34;received_avp\u0026#34;, \u0026#34;$avp(rcv)\u0026#34;) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;natping_interval\u0026#34;, 10) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;ping_threshold\u0026#34;, 10) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;max_pings_lost\u0026#34;, 5) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;natping_partitions\u0026#34;, 4) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;natping_socket\u0026#34;, \u0026#34;172.16.0.3:5272\u0026#34;) #修改发送ping的本地端口 modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;sipping_bflag\u0026#34;, \u0026#34;SIPPING_ENABLE\u0026#34;) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;sipping_from\u0026#34;, \u0026#34;sip:pinger@siphub.net\u0026#34;) modparam(\u0026#34;nathelper\u0026#34;, \u0026#34;sipping_method\u0026#34;, \u0026#34;OPTIONS\u0026#34;) fix_nated_register() 以Register信令为例, 想要修改Register的Contact信息，在save之前,调用fix_nated_register(), 具体为：\n1 2 3 4 5 6 7 8 9 10 if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;);\tfix_nated_register(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error();\texit; } 具体效果为：\n保存的用户信息中新增了Received字段存储NAT信息,使用opensips-cli 里的mi ul_dump查看： contact信息并未变化 在给客户端返回200OK的Contact字段中增加received字段， fix_nated_contact() 此时opensips保存的Register里的Contact会被修改成NAT的ip和port. 如何开启ping? nathelper有两种方式：\nping_nated_only 这个参数是：Contact里带有behind_NAT标志，才会ping. 2. sipping_bflag\n以本配置为例,设置的标志为：SIPPING_ENABLE, 那么在Register信令处, 要设置SIPPING_ENABLE标志。\n1 2 3 4 5 6 7 8 9 10 11 12 if (is_method(\u0026#34;REGISTER\u0026#34;)) { # indicate that the client supports DTLS # so we know when he is called if (isflagset(\u0026#34;SRC_WS\u0026#34;)) setbflag(\u0026#34;DST_WS\u0026#34;);\tsetbflag(\u0026#34;SIPPING_ENABLE\u0026#34;); fix_nated_register(); fix_nated_contact(); if (!save(\u0026#34;location\u0026#34;)) sl_reply_error();\texit; } 效果为：\n如果坐席注销，nathelper立即就停止ping,比nat_traversal效果要好。\nfix_nated_sdp() 参数 0x01 - adds “a=direction:active” SDP line; 0x02 - 重写sdp中的c=ip地址为NAT的ip地址; 0x04 - adds “a=nortpproxy:yes” SDP line; 0x08 - 重写sdp中的o=ip地址为NAT的ip地址; 0x10 - 重写所有的媒体ip 在需要修改sdp的Route里，执行此函数即可，sdp参数例子为：\n","date":"2025-02-19T09:24:03+08:00","image":"https://QuincyGao.github.io/p/nat_traversal%E5%92%8Cnathelper%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/7_hu9058017268728565075.jpg","permalink":"https://QuincyGao.github.io/p/nat_traversal%E5%92%8Cnathelper%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/","title":"NAT_TRAVERSAL和NATHELPER模块介绍"},{"content":"SDP协议 SDP协议版本 sdp协议最新链接：rfc8866\n历史版本：rfc4566 rfc2327\n特性 RFC 2327 (1998) RFC 4566 (2006) RFC 8866 (2021) IP 支持 仅 IPv4 IPv4 + IPv6 IPv4 + IPv6 安全机制 无 基础（如 k=） 完善(DTLS-SRTP 等) ICE 支持 无 初步属性支持 完整规范 扩展性 有限 新增属性字段 明确的扩展规则 应用场景 传统 VoIP WebRTC 早期 现代 WebRTC/5G 本次以rfc8866为例学习\nsdp 参数解析 session Description 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 v= (protocol version) o= (originator and session identifier) s= (session name) i=* (session information) u=* (URI of description) e=* (email address) p=* (phone number) c=* (connection information -- not required if included in all media descriptions) b=* (zero or more bandwidth information lines) One or more time descriptions: (\u0026#34;t=\u0026#34;, \u0026#34;r=\u0026#34; and \u0026#34;z=\u0026#34; lines; see below) k=* (obsolete) a=* (zero or more session attribute lines) Zero or more media descriptions v=0 版本默认是0\no=\u0026lt;username\u0026gt; \u0026lt;sess-id\u0026gt; \u0026lt;sess-version\u0026gt; \u0026lt;nettype\u0026gt; \u0026lt;addrtype\u0026gt; \u0026lt;unicast-address\u0026gt;\nusername: 用户登录的原始host,默认\u0026rsquo;-'\nsess-id: 会话id，具备唯一性\nsess-version: 会话版本，可和sess-id一致\nnettype: 网络类型，默认为IN\naddrtype: 地址类型，默认为IP4 or IP6\nunicast-address: ip地址\ns=\u0026lt;session name\u0026gt; 必须填写,没有则为\u0026rsquo;s=\u0026rsquo; or \u0026rsquo;s=-' i=\u0026lt;session information\u0026gt; 描述会话信息,可选 u=\u0026lt;uri\u0026gt; 描述会话uri, 可选 e=\u0026lt;email-address\u0026gt; p=\u0026lt;phone number\u0026gt;, 可选 c=\u0026lt;nettype\u0026gt; \u0026lt;addrtype\u0026gt; \u0026lt;connection-address\u0026gt; 连接信息，为\u0026rsquo;IN IP4 xxxx\u0026rsquo;, c可以有多个 b=\u0026lt;bwtype\u0026gt;:\u0026lt;bandwidth\u0026gt; 带宽信息，可选 k=\u0026lt;keytype\u0026gt; \u0026lt;key\u0026gt; 加密信息，可选 Time Description 1 2 3 t= (time the session is active) r=* (zero or more repeat times) z=* (optional time zone offset line) t=\u0026lt;start-time\u0026gt; \u0026lt;stop-time\u0026gt; 会话开始和结束时间戳，可多个，开始和结束时间都为0，会话视为永久 r=\u0026lt;repeat interval\u0026gt; \u0026lt;active duration\u0026gt; \u0026lt;offsets from start-time\u0026gt; 重复时间间隔和持续时间，可选 z=\u0026lt;adjustment time\u0026gt; \u0026lt;offset\u0026gt; \u0026lt;adjustment time\u0026gt; \u0026lt;offset\u0026gt; ... 时区偏移，可选 Media Description 1 2 3 4 5 6 7 m= (media name and transport address) i=* (media title) c=* (connection information -- optional if included at session level) b=* (zero or more bandwidth information lines) k=* (obsolete) a=* (zero or more media attribute lines) m=\u0026lt;media\u0026gt; \u0026lt;port\u0026gt;/\u0026lt;numers of ports\u0026gt; \u0026lt;proto\u0026gt; \u0026lt;fmt\u0026gt; ... 媒体描述，必选. media: audio、video、text、application、message port: 端口号，0-65535，0表示不指定端口, numbers of ports: rtp 会话数选择 proto: 传输协议，udp,RTP/AVP,RTP/SAVP,RTP/SAVPF fmt: 媒体格式，如 0、8、9、97、98、99、101、102、103、104、105等 k=\u0026lt;method\u0026gt; k=\u0026lt;method\u0026gt;:\u0026lt;encryption key\u0026gt; 已过时，不要用 a=\u0026lt;aattribute-name\u0026gt; a=\u0026lt;attribute-name\u0026gt;:\u0026lt;aattribute-value\u0026gt; 扩展sdp信息，可多个 rtpmap: 媒体格式的描述, 要和m=里fmt格式一致 详细示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 v=0 o=jdoe 3724394400 3724394405 IN IP4 198.51.100.1 s=Call to John Smith i=SDP Offer #1 u=http://www.jdoe.example.com/home.html e=Jane Doe \u0026lt;jane@jdoe.example.com\u0026gt; p=+1 617 555-6011 c=IN IP4 198.51.100.1 t=0 0 m=audio 49170 RTP/AVP 0 m=audio 49180 RTP/AVP 0 m=video 51372 RTP/AVP 99 c=IN IP6 2001:db8::2 a=rtpmap:99 h263-1998/90000 RTP协议 RTP协议连接 协议地址：rfc3550\n老协议:rfc1889\nRTP协议结构 1 2 3 4 5 6 7 8 9 10 11 12 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |V=2|P|X| CC |M| PT | sequence number | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | timestamp | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | synchronization source (SSRC) identifier | +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ | contributing source (CSRC) identifiers | | .... | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ sequence number: 初始值随机不可预测生成，用于标识一个RTP包，每次发送+1 timestamp: 初始值随机时间戳，每次新增采样时钟，比如audio为160 SSRC: 初始值随机，多个源时会有概率冲突，如果一个源修改源地址，那么要使用新SSRC. CSRC: 标识有效负载的贡献源 SSRC 生成算法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include \u0026lt;sys/types.h\u0026gt; /* u_long */ #include \u0026lt;sys/time.h\u0026gt; /* gettimeofday() */ #include \u0026lt;unistd.h\u0026gt; /* get..() */ #include \u0026lt;stdio.h\u0026gt; /* printf() */ #include \u0026lt;time.h\u0026gt; /* clock() */ #include \u0026lt;sys/utsname.h\u0026gt; /* uname() */ #include \u0026#34;global.h\u0026#34; /* from RFC 1321 */ #include \u0026#34;md5.h\u0026#34; /* from RFC 1321 */ #define MD_CTX MD5_CTX #define MDInit MD5Init #define MDUpdate MD5Update #define MDFinal MD5Final static u_long md_32(char *string, int length) { MD_CTX context; union { char c[16]; u_long x[4]; } digest; u_long r; int i; MDInit (\u0026amp;context); MDUpdate (\u0026amp;context, string, length); MDFinal ((unsigned char *)\u0026amp;digest, \u0026amp;context); r = 0; for (i = 0; i \u0026lt; 3; i++) { r ^= digest.x[i]; } return r; } /* md_32 */ /* * Return random unsigned 32-bit quantity. Use \u0026#39;type\u0026#39; argument if * you need to generate several different values in close succession. */ u_int32 random32(int type) { struct { int type; struct timeval tv; clock_t cpu; pid_t pid; u_long hid; uid_t uid; gid_t gid; struct utsname name; } s; gettimeofday(\u0026amp;s.tv, 0); uname(\u0026amp;s.name); s.type = type; s.cpu = clock(); s.pid = getpid(); s.hid = gethostid(); s.uid = getuid(); s.gid = getgid(); /* also: system uptime */ return md_32((char *)\u0026amp;s, sizeof(s)); } /* random32 */ 在实际使用媒体服务中，有部分服务使用了SSRC来区分数据， 业务表现就是媒体服务只用一个端口来接收RTP数据(比如:jitsi-videobridge)。 好处： 当对接时，可以不需要开通太多端口区间。不足： 并发性能不高。 其余大部分的媒体服务都是使用多个端口来接收RTP数据(比如: rtpengine, rtpproxy, freeswitch)。\n","date":"2025-02-18T09:03:07+08:00","image":"https://QuincyGao.github.io/p/sdp%E5%92%8Crtp%E5%8D%8F%E8%AE%AE/6_hu2046866609988021794.jpg","permalink":"https://QuincyGao.github.io/p/sdp%E5%92%8Crtp%E5%8D%8F%E8%AE%AE/","title":"SDP和RTP协议"},{"content":"sip协议Call Flow Examples sip示例原文:rfc3665\nREGISTER 基础注册流程 sequenceDiagram Bob-\u0026gt;\u0026gt;SIP server: REGISTER SIP server--\u0026gt;\u0026gt;Bob: 401 Unauthorized Note over SIP server: 401 Unauthorized 返回 WWW-Authenticate Bob-\u0026gt;\u0026gt;SIP server: REGISTER Note over Bob: REGISTER 带Authorization SIP server--\u0026gt;\u0026gt;Bob: 200 OK Note over SIP server: 200 OK 返回注册的Contact 查询注册状态 sequenceDiagram Bob-\u0026gt;\u0026gt;SIP server: REGISTER Note over Bob: REGISTER 不带Contact SIP server--\u0026gt;\u0026gt;Bob: 200 OK Note over SIP server: 200 OK 返回注册的Contact 取消注册 sequenceDiagram Bob-\u0026gt;\u0026gt;SIP server: REGISTER Note over Bob: REGISTER 带Expires:0 SIP server--\u0026gt;\u0026gt;Bob: 200 OK Note over SIP server: 200 OK 不带Contact INVITE 基础流程 sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: INVITE Bob--\u0026gt;\u0026gt;Alice: 100 Trying Bob-\u0026gt;\u0026gt;Alice: 180 Ringing Bob-\u0026gt;\u0026gt;Alice: 200 OK Alice-\u0026gt;\u0026gt;Bob: ACK Bob\u0026lt;\u0026lt;-\u0026gt;\u0026gt;Alice: RTP meida Bob-\u0026gt;\u0026gt;Alice: BYE Alice-\u0026gt;\u0026gt;Bob: 200 OK 经过两个代理 注意： 因为时序图不能解析; 所以使用 | 代替;方便显示\nAlice 能请求到proxy1是因为INVITE的Route指向的是proxy1, Requset-URI指向的是proxy2.\nbob 返回180,200 ok 是通过Via 定位路由，bob 发送BYE 是通过 Route 定位路由.\nalice 发送ACK 是通过Route定位路由.\nsequenceDiagram actor Alice as Alice\u0026lt;br/\u0026gt;client.atlanta.example.com participant Proxy1 as Proxy1\u0026lt;br/\u0026gt;ss1.atlanta.example.com participant Proxy2 as Proxy2\u0026lt;br/\u0026gt;ss2.biloxi.example.com actor Bob as Bob \u0026lt;br/\u0026gt;client.biloxi.example.com Alice-\u0026gt;\u0026gt;Proxy1: INVITE Proxy1-\u0026gt;\u0026gt;Alice: SIP/2.0 407 Proxy Authorization Required Alice-\u0026gt;\u0026gt;Proxy1: ACK Alice-\u0026gt;\u0026gt;Proxy1: INVITE Proxy1--\u0026gt;\u0026gt;Alice: 100 Trying Proxy1-\u0026gt;\u0026gt;Proxy2: INVITE Proxy2--\u0026gt;\u0026gt;Proxy1: 100 Trying Proxy2-\u0026gt;\u0026gt;Bob: INVITE Bob--\u0026gt;\u0026gt;Proxy2: 100 Trying Bob-\u0026gt;\u0026gt;Proxy2: 180 Ringing Proxy2-\u0026gt;\u0026gt;Proxy1: 180 Ringing Proxy1-\u0026gt;\u0026gt;Alice: 180 Ringing Bob-\u0026gt;\u0026gt;Proxy2: 200 OK Proxy2-\u0026gt;\u0026gt;Proxy1: 200 OK Proxy1-\u0026gt;\u0026gt;Alice: 200 OK Alice-\u0026gt;\u0026gt;Proxy1: ACK Proxy1-\u0026gt;\u0026gt;Proxy2: ACK Proxy2-\u0026gt;\u0026gt;Bob: ACK Bob\u0026lt;\u0026lt;-\u0026gt;\u0026gt;Alice: RTP meida Bob-\u0026gt;\u0026gt;Proxy2: BYE Proxy2-\u0026gt;\u0026gt;Proxy1: BYE Proxy1-\u0026gt;\u0026gt;Alice: BYE Alice-\u0026gt;\u0026gt;Proxy1: 200 OK Proxy1-\u0026gt;\u0026gt;Proxy2: 200 OK Proxy2-\u0026gt;\u0026gt;Bob: 200 OK 详细的SIP信令\nAlice -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 INVITE sip:bob@biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74b43 Max-Forwards: 70 Route: \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com;transport=tcp\u0026gt; Content-Type: application/sdp Content-Length: 151 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 407 Proxy Authorization Required Proxy 1 -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 10 11 SIP/2.0 407 Proxy Authorization Required Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74b43 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=3flal12sf Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 INVITE Proxy-Authenticate: Digest realm=\u0026#34;atlanta.example.com\u0026#34;, qop=\u0026#34;auth\u0026#34;, nonce=\u0026#34;f84f1cec41e6cbe5aea9c8e88d359\u0026#34;, opaque=\u0026#34;\u0026#34;, stale=FALSE, algorithm=MD5 Content-Length: 0 ACK Alice -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 ACK sip:bob@biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74b43 Max-Forwards: 70 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=3flal12sf Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 ACK Content-Length: 0 INVITE Alice -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 INVITE sip:bob@biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 Max-Forwards: 70 Route: \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com;transport=tcp\u0026gt; Proxy-Authorization: Digest username=\u0026#34;alice\u0026#34;, realm=\u0026#34;atlanta.example.com\u0026#34;, nonce=\u0026#34;wf84f1ceczx41ae6cbe5aea9c8e88d359\u0026#34;, opaque=\u0026#34;\u0026#34;, uri=\u0026#34;sip:bob@biloxi.example.com\u0026#34;, response=\u0026#34;42ce3cef44b22f50c6a6071bc8\u0026#34; Content-Type: application/sdp Content-Length: 151 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 100 Trying Proxy1 -\u0026gt; Alice 1 2 3 4 5 6 7 8 SIP/2.0 100 Trying Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Content-Length: 0 INVITE Proxy1 -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 INVITE sip:bob@biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Max-Forwards: 69 Record-Route: \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com;transport=tcp\u0026gt; Content-Type: application/sdp Content-Length: 151 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 100 Trying Proxy2 -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 SIP/2.0 100 Trying Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Content-Length: 0 INVITE Proxy2 -\u0026gt; Bob 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 INVITE sip:bob@client.biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Max-Forwards: 68 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com;transport=tcp\u0026gt; Content-Type: application/sdp Content-Length: 151 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 180 Ringing Bob -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 SIP/2.0 180 Ringing Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 ;received=192.0.2.222 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com Contact: \u0026lt;sip:bob@client.biloxi.example.com;transport=tcp\u0026gt; CSeq: 2 INVITE Content-Length: 0 180 Ringing Proxy2 -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 11 12 13 SIP/2.0 180 Ringing Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com Contact: \u0026lt;sip:bob@client.biloxi.example.com;transport=tcp\u0026gt; CSeq: 2 INVITE Content-Length: 0 180 Ringing Proxy1 -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 10 11 SIP/2.0 180 Ringing Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com Contact: \u0026lt;sip:bob@client.biloxi.example.com;transport=tcp\u0026gt; CSeq: 2 INVITE Content-Length: 0 200 OK Bob -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 SIP/2.0 200 OK Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 ;received=192.0.2.222 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com;transport=tcp\u0026gt; Content-Type: application/sdp Content-Length: 147 v=0 o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com s=- c=IN IP4 192.0.2.201 t=0 0 m=audio 3456 RTP/AVP 0 a=rtpmap:0 PCMU/8000 200 OK Proxy2 -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 SIP/2.0 200 OK Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com;transport=tcp\u0026gt; Content-Type: application/sdp Content-Length: 147 v=0 o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com s=- c=IN IP4 192.0.2.201 t=0 0 m=audio 3456 RTP/AVP 0 a=rtpmap:0 PCMU/8000 200 OK Proxy1 -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 SIP/2.0 200 OK Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Record-Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com;transport=tcp\u0026gt; Content-Type: application/sdp Content-Length: 147 v=0 o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com s=- c=IN IP4 192.0.2.201 t=0 0 m=audio 3456 RTP/AVP 0 a=rtpmap:0 PCMU/8000 ACK Alice -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 ACK sip:bob@client.biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74b76 Max-Forwards: 70 Route: \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt;, \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 ACK Content-Length: 0 ACK Proxy1 -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 ACK sip:bob@client.biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74b76 ;received=192.0.2.101 Max-Forwards: 69 Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt; From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 ACK Content-Length: 0 ACK Proxy2 -\u0026gt; Bob 1 2 3 4 5 6 7 8 9 10 11 12 ACK sip:bob@client.biloxi.example.com SIP/2.0 Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74b76 ;received=192.0.2.101 Max-Forwards: 68 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 3848276298220188511@atlanta.example.com CSeq: 2 ACK Content-Length: 0 BYE Bob -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 BYE sip:alice@client.atlanta.example.com SIP/2.0 Via: SIP/2.0/TCP client.biloxi.example.com:5060;branch=z9hG4bKnashds7 Max-Forwards: 70 Route: \u0026lt;sip:ss2.biloxi.example.com;lr\u0026gt;, \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 BYE Content-Length: 0 BYE Proxy2 -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 11 BYE sip:alice@client.atlanta.example.com SIP/2.0 Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 Via: SIP/2.0/TCP client.biloxi.example.com:5060;branch=z9hG4bKnashds7 ;received=192.0.2.201 Max-Forwards: 69 Route: \u0026lt;sip:ss1.atlanta.example.com;lr\u0026gt; From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 BYE Content-Length: 0 BYE Proxy1 -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 10 11 12 BYE sip:alice@client.atlanta.example.com SIP/2.0 Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 ;received=192.0.2.222 Via: SIP/2.0/TCP client.biloxi.example.com:5060;branch=z9hG4bKnashds7 ;received=192.0.2.201 Max-Forwards: 68 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 BYE Content-Length: 0 200 OK Alice -\u0026gt; Proxy1 1 2 3 4 5 6 7 8 9 10 11 12 SIP/2.0 200 OK Via: SIP/2.0/TCP ss1.atlanta.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.111 Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 ;received=192.0.2.222 Via: SIP/2.0/TCP client.biloxi.example.com:5060;branch=z9hG4bKnashds7 ;received=192.0.2.201 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 BYE Content-Length: 0 200 OK Proxy1 -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 SIP/2.0 200 OK Via: SIP/2.0/TCP ss2.biloxi.example.com:5060;branch=z9hG4bK721e4.1 ;received=192.0.2.222 Via: SIP/2.0/TCP client.biloxi.example.com:5060;branch=z9hG4bKnashds7 ;received=192.0.2.101 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 BYE Content-Length: 0 200 OK Proxy2 -\u0026gt; Bob 1 2 3 4 5 6 7 8 SIP/2.0 200 OK Via: SIP/2.0/TCP client.biloxi.example.com:5060;branch=z9hG4bKnashds7 ;received=192.0.2.201 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 3848276298220188511@atlanta.example.com CSeq: 1 BYE Content-Length: 0 RE-INVITE 在此例中，Alice的ACK直接发给了Bob，是因为Proxy2到Alice的200 OK里没有Record-Route.\nBob的Re-INVITE直接发给了Alice,是因为Proxy2到Bob的INVITE没带Record-Route.\nsequenceDiagram actor Alice as Alice\u0026lt;br/\u0026gt;client.atlanta.example.com participant Proxy2 as Proxy2\u0026lt;br/\u0026gt;ss2.biloxi.example.com actor Bob as Bob\u0026lt;br/\u0026gt;client.biloxi.example.com Alice-\u0026gt;\u0026gt;Proxy2: INVITE Proxy2--\u0026gt;\u0026gt;Alice: 100 Trying Proxy2-\u0026gt;\u0026gt;Bob: INVITE Bob--\u0026gt;\u0026gt;Proxy2: 100 Trying Bob-\u0026gt;\u0026gt;Proxy2: 180 Ringing Proxy2-\u0026gt;\u0026gt;Alice: 180 Ringing Bob-\u0026gt;\u0026gt;Proxy2: 200 OK Proxy2-\u0026gt;\u0026gt;Alice: 200 OK Alice-\u0026gt;\u0026gt;Bob: ACK Alice\u0026lt;\u0026lt;-\u0026gt;\u0026gt;Bob: RTP Media Bob-\u0026gt;\u0026gt;Alice: INVITE Alice-\u0026gt;\u0026gt;Bob: 200 OK Bob-\u0026gt;\u0026gt;Alice: ACK Bob\u0026lt;\u0026lt;-\u0026gt;\u0026gt;Alice: New RTP Media Alice-\u0026gt;\u0026gt;Bob: BYE Bob-\u0026gt;\u0026gt;Alice: 200 OK Alice sends an INVITE to Proxy2. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 INVITE sip:bob@biloxi.example.com SIP/2.0 Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 Max-Forwards: 70 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com\u0026gt; Content-Type: application/sdp Content-Length: 151 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 100 Trying Alice -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 SIP/2.0 100 Trying Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Content-Length: 0 INVITE Proxy2 -\u0026gt; Bob 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 INVITE sip:bob@client.biloxi.example.com SIP/2.0 Via: SIP/2.0/UDP ss2.biloxi.example.com:5060;branch=z9hG4bK2d4790.1 Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 Max-Forwards: 69 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt; Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com\u0026gt; Content-Type: application/sdp Content-Length: 151 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 180 Ringing Bob -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 SIP/2.0 180 Ringing Via: SIP/2.0/UDP ss2.biloxi.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.222 Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com\u0026gt; Content-Length: 0 180 Ringing Proxy2 -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 SIP/2.0 180 Ringing Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com\u0026gt; Content-Length: 0 200 OK Bob -\u0026gt; Proxy2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 SIP/2.0 200 OK Via: SIP/2.0/UDP ss2.biloxi.example.com:5060;branch=z9hG4bK2d4790.1 ;received=192.0.2.222 Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com\u0026gt; Content-Type: application/sdp Content-Length: 147 v=0 o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com s=- c=IN IP4 192.0.2.201 t=0 0 m=audio 3456 RTP/AVP 0 a=rtpmap:0 PCMU/8000 200 OK Proxy2 -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 SIP/2.0 200 OK Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bf9 ;received=192.0.2.101 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 INVITE Contact: \u0026lt;sip:bob@client.biloxi.example.com\u0026gt; Content-Type: application/sdp Content-Length: 147 v=0 o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com s=- c=IN IP4 192.0.2.201 t=0 0 m=audio 3456 RTP/AVP 0 a=rtpmap:0 PCMU/8000 ACK Alice -\u0026gt; Bob 1 2 3 4 5 6 7 8 ACK sip:bob@client.biloxi.example.com SIP/2.0 Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74b7b Max-Forwards: 70 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 1 ACK Content-Length: 0 INVITE Bob -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 INVITE sip:alice@client.atlanta.example.com SIP/2.0 Via: SIP/2.0/UDP client.chicago.example.com:5060;branch=z9hG4bKlkld5l Max-Forwards: 70 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 14 INVITE Contact: \u0026lt;sip:bob@client.chicago.example.com\u0026gt; Content-Type: application/sdp Content-Length: 149 v=0 o=bob 2890844527 2890844528 IN IP4 client.chicago.example.com s=- c=IN IP4 192.0.2.100 t=0 0 m=audio 47172 RTP/AVP 0 a=rtpmap:0 PCMU/8000 200 OK Alice -\u0026gt; Bob 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 SIP/2.0 200 OK Via: SIP/2.0/UDP client.chicago.example.com:5060;branch=z9hG4bKlkld5l ;received=192.0.2.100 Max-Forwards: 70 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 14 INVITE Contact: \u0026lt;sip:alice@client.atlanta.example.com\u0026gt; Content-Type: application/sdp Content-Length: 150 v=0 o=alice 2890844526 2890844526 IN IP4 client.atlanta.example.com s=- c=IN IP4 192.0.2.101 t=0 0 m=audio 1000 RTP/AVP 0 a=rtpmap:0 PCMU/8000 ACK Alice -\u0026gt; Bob 1 2 3 4 5 6 7 8 ACK sip:alice@client.atlanta.example.com SIP/2.0 Via: SIP/2.0/UDP client.chicago.example.com:5060;branch=z9hG4bKlkldcc Max-Forwards: 70 From: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 To: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 14 ACK Content-Length: 0 BYE Alice -\u0026gt; Bob 1 2 3 4 5 6 7 8 BYE sip:bob@client.chicago.example.com SIP/2.0 Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bo4 Max-Forwards: 70 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 2 BYE Content-Length: 0 200 OK Bob -\u0026gt; Alice 1 2 3 4 5 6 7 8 9 SIP/2.0 200 OK Via: SIP/2.0/UDP client.atlanta.example.com:5060;branch=z9hG4bK74bo4 ;received=192.0.2.101 Max-Forwards: 70 From: Alice \u0026lt;sip:alice@atlanta.example.com\u0026gt;;tag=9fxced76sl To: Bob \u0026lt;sip:bob@biloxi.example.com\u0026gt;;tag=314159 Call-ID: 2xTb9vxSit55XU7p8@atlanta.example.com CSeq: 2 BYE Content-Length: 0 ","date":"2025-02-13T14:17:05+08:00","image":"https://QuincyGao.github.io/p/sip%E5%8D%8F%E8%AE%AErfc2361%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0%E4%BA%8C/5_hu15837114208695042845.jpg","permalink":"https://QuincyGao.github.io/p/sip%E5%8D%8F%E8%AE%AErfc2361%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0%E4%BA%8C/","title":"sip协议(rfc2361)要点笔记(二)"},{"content":"sip协议(rfc2361)原文 sip协议原文:rfc2361\n旧版sip协议原文:rfc2543\n基础要点 request line的格式为： Method SP Request-URI SP SIP-Version CRLF\nSP 是空格，Request-URI 是请求的资源，SIP-Version 是sip协议版本号，CRLF 是回车换行。 信令主要有：REGISTER,INVITE,ACK,CANCEL,BYE,OPTIONS,INFO,SUBSCRIBE,NOTIFY,REFER,MESSAGE\nuri完整格式:\nsip:user:password@host:port;uri-parameters?headers\nresponse line的格式为： SIP-Version SP Status-Code SP Reason-Phrase CRLF\nSIP-Version 是sip协议版本号，Status-Code 是响应码，Reason-Phrase 是响应短语，CRLF 是回车换行。\nHeader字段 格式:field-name: field-value 1 2 3 4 Subject: lunch Subject : lunch Subject :lunch Subject: lunch 以上都是正确的格式，但是Subject:lunch是最好的格式。\nfield-name相同的可以有多个，以下都是等价的 1 2 3 4 Route: \u0026lt;sip:alice@atlanta.com\u0026gt; Subject: Lunch Route: \u0026lt;sip:bob@biloxi.com\u0026gt; Route: \u0026lt;sip:carol@chicago.com\u0026gt; 1 2 3 Route: \u0026lt;sip:alice@atlanta.com\u0026gt;, \u0026lt;sip:bob@biloxi.com\u0026gt; Route: \u0026lt;sip:carol@chicago.com\u0026gt; Subject: Lunch 1 2 3 Subject: Lunch Route: \u0026lt;sip:alice@atlanta.com\u0026gt;, \u0026lt;sip:bob@biloxi.com\u0026gt;, \u0026lt;sip:carol@chicago.com\u0026gt; Route是有顺序的，以下两个是不等价的\n1 2 3 Route: \u0026lt;sip:alice@atlanta.com\u0026gt; Route: \u0026lt;sip:bob@biloxi.com\u0026gt; Route: \u0026lt;sip:carol@chicago.com\u0026gt; 1 2 3 Route: \u0026lt;sip:bob@biloxi.com\u0026gt; Route: \u0026lt;sip:alice@atlanta.com\u0026gt; Route: \u0026lt;sip:carol@chicago.com\u0026gt; field-name 是没有大小写区分的，但是field-value 是区分大小写的。 field-name 可以缩写，避免超过MTU. Header缩写表 field-name 简写 Call-ID i Contact m Content-Encoding e Content-Length l Content-Type c From f Subject s Supported k To t Via v UAC 请求头必须有六要素:From, To, Call-ID, CSeq, Via, Max-Forwards\nresponse头里的From,Call-ID,CSeq必须和request头里的相同。response的Via包含request的Via\n如果request头里To没有tag,response的To里的URL必须和request的To的URL一样。\n如何request头里To有tag,response的To必须和request的To一样。\n无状态的UAS 1 2 3 4 不会发送(1xx)response 不会重传response 忽略ACK request 忽略CANCEL request CANCEL 最好只对INVITE 请求使用,不能包括RequireorProxy-Require头 REGISTER response 带有Date字段，会通知client校准本地时间 response 不能带Record-Route字段,如果request带Record-Route字段, UAS要忽略掉。 expires的优先级高于Expires字段 200（OK）response必带Contact字段，以及expires参数 dialog 如果response没有收到route，UAC 必须把remote target uri 放到Request-URI里，然后请求不能加Route头 如果reponse收到route,并且route里的第一个uri包含lr字段， uac必须把remote target uri 放到Request-URI里， 然后请求添加Route头，把respose的route放到Route头里。 如果response收到route,并且route里的第一个uri不包含lr字段， uac必须把route里的第一个uri去掉其他的参数放到Request-URI里， 然后请求头添加Route,response的route放到Route头里。 把remote target uri 放到``Route`最后。 例子：remote target is sip:user@remoteua and the route set contains: \u0026lt;sip:proxy1\u0026gt;,\u0026lt;sip:proxy2\u0026gt;,\u0026lt;sip:proxy3;lr\u0026gt;,\u0026lt;sip:proxy4\u0026gt;\n那么请求为:\n1 2 METHOD sip:proxy1 Route: \u0026lt;sip:proxy2\u0026gt;,\u0026lt;sip:proxy3;lr\u0026gt;,\u0026lt;sip:proxy4\u0026gt;,\u0026lt;sip:user@remoteua\u0026gt; 如果uac收到2xx repsonse, 那么uac 必须使用response的Contact 作为remote target uri\n如果uas收到request时，那么uas 必须把request的Contact作为 remote target uri来发送请求\nuac 必须生成ACK request 为 2xx response, ACK的CSeq number和INVITE的CSeq number相同\nuas 收到INVITE 没有SDP信息时，uas必须返回2xx response 带有SDP信息,这个就是（UPDATE）\nProxy流转 注意： mermaid不支持;目前使用|代替\n基础流程 sequenceDiagram actor U1 as U1\u0026lt;br/\u0026gt;u1.example.com participant P1 as P1\u0026lt;br/\u0026gt;example.com participant P2 as P2\u0026lt;br/\u0026gt;domain.com actor U2 as U2\u0026lt;br/\u0026gt;u2.domain.com U1-\u0026gt;\u0026gt;P1: INVITE sip:callee@domain.com SIP/2.0\u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com P1-\u0026gt;\u0026gt;P2: INVITE sip:callee@domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.example.com|lr\u0026gt; P2-\u0026gt;\u0026gt;U2: INVITE sip:callee@u2.domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p2.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p1.example.com|lr\u0026gt; U2-\u0026gt;\u0026gt;P2: SIP/2.0 200 OK \u0026lt;br/\u0026gt; Contact: sip:callee@u2.domain.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p2.domain.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.example.com|lr\u0026gt; P2-\u0026gt;\u0026gt;P1: SIP/2.0 200 OK \u0026lt;br/\u0026gt; Contact: sip:callee@u2.domain.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p2.domain.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.example.com|lr\u0026gt; P1-\u0026gt;\u0026gt;U1: SIP/2.0 200 OK \u0026lt;br/\u0026gt; Contact: sip:callee@u2.domain.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p2.domain.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.example.com|lr\u0026gt; U1-\u0026gt;\u0026gt;P1: BYE sip:callee@u2.domain.com SIP/2.0 \u0026lt;br/\u0026gt; Route: \u0026lt;sip:p1.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p2.domain.com|lr\u0026gt; P1-\u0026gt;\u0026gt;P2: BYE sip:callee@u2.domain.com SIP/2.0 \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p2.domain.com|lr\u0026gt; P2-\u0026gt;\u0026gt;U2: BYE sip:callee@u2.domain.com SIP/2.0 严格路由流程 这是U1请求U2,但是经过中间P1,P2,P3,P4转发 sequenceDiagram actor U1 as U1\u0026lt;br/\u0026gt;u1.example.com participant P1 as P1\u0026lt;br/\u0026gt;example.com participant P2 as P2\u0026lt;br/\u0026gt;example.com participant P3 as P3\u0026lt;br/\u0026gt;middle.com participant P4 as P4\u0026lt;br/\u0026gt;domain.com actor U2 as U2\u0026lt;br/\u0026gt;u2.domain.com U1-\u0026gt;\u0026gt;P1: INVITE sip:callee@domain.com SIP/2.0\u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com P1-\u0026gt;\u0026gt;P2: INVITE sip:callee@domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.example.com|lr\u0026gt; P2-\u0026gt;\u0026gt;P3: INVITE sip:callee@domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p2.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p1.example.com|lr\u0026gt; P3-\u0026gt;\u0026gt;P4: INVITE sip:callee@domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p3.middle.com\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p2.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p1.example.com|lr\u0026gt; P4-\u0026gt;\u0026gt;U2: INVITE sip:callee@u2.domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: sip:caller@u1.example.com \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p4.domain.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p3.middle.com\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p2.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Record-Route:\u0026lt;sip:p1.example.com|lr\u0026gt; U2-\u0026gt;\u0026gt;P4: BYE sip:caller@u1.example.com SIP/2.0 \u0026lt;br/\u0026gt; Route: \u0026lt;sip:p4.domain.com|lr\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p3.middle.com\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p2.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p1.example.com|lr\u0026gt; P4-\u0026gt;\u0026gt;P3: BYE sip:p3.middle.com SIP/2.0 \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p2.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p1.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:caller@u1.example.com\u0026gt; P3-\u0026gt;\u0026gt;P2: BYE sip:p2.example.com|lr SIP/2.0 \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p1.example.com|lr\u0026gt; \u0026lt;br/\u0026gt; Route:\u0026lt;sip:caller@u1.example.com\u0026gt; P2-\u0026gt;\u0026gt;P1: BYE sip:caller@u1.example.com SIP/2.0 \u0026lt;br/\u0026gt; Route:\u0026lt;sip:p1.example.com|lr\u0026gt; P1-\u0026gt;\u0026gt;U1: BYE sip:caller@u1.example.com SIP/2.0 U1请求P1,P1转发U2 sequenceDiagram actor U1 as U1\u0026lt;br/\u0026gt;u1.example.com participant P1 as P1\u0026lt;br/\u0026gt;p1.middle.com actor U2 as U2\u0026lt;br/\u0026gt;u2.domain.com U1-\u0026gt;\u0026gt;P1: INVITE sip:callee@middle.com SIP/2.0\u0026lt;br/\u0026gt; Contact: \u0026lt;sip:caller@u1.example.com\u0026gt; P1-\u0026gt;\u0026gt;U2: INVITE sip:callee@u2.domain.com SIP/2.0 \u0026lt;br/\u0026gt; Contact: \u0026lt;sip:caller@u1.example.com\u0026gt; \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.middle.com|lr\u0026gt; U2-\u0026gt;\u0026gt;P1: SIP/2.0 200 OK \u0026lt;br/\u0026gt; Contact: \u0026lt;sip:callee@u2.domain.com\u0026gt; \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.middle.com|lr\u0026gt; P1-\u0026gt;\u0026gt;U1: SIP/2.0 200 OK \u0026lt;br/\u0026gt; Contact: \u0026lt;sip:callee@u2.domain.com\u0026gt; \u0026lt;br/\u0026gt; Record-Route: \u0026lt;sip:p1.middle.com|lr\u0026gt; U1-\u0026gt;\u0026gt;P1: BYE sip:callee@u2.domain.com SIP/2.0 \u0026lt;br/\u0026gt; Route: \u0026lt;sip:p1.middle.com|lr\u0026gt; P1-\u0026gt;\u0026gt;U2: BYE sip:callee@u2.domain.com SIP/2.0 ","date":"2025-02-12T11:38:46+08:00","image":"https://QuincyGao.github.io/p/sip%E5%8D%8F%E8%AE%AErfc2361%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0%E4%B8%80/4_hu15279133479520789145.jpg","permalink":"https://QuincyGao.github.io/p/sip%E5%8D%8F%E8%AE%AErfc2361%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0%E4%B8%80/","title":"sip协议(rfc2361)要点笔记(一)"},{"content":"支持时序图 技术文档中常会用到时序图，hugo 默认不支持时序图，需要安装 mermaid.js.\n参考: hugo-mermaid\n我使用的hugo主题是: hugo-theme-stack\n使用方法 在路径layouts/_default/_markup/下新建一个文件render-codeblock-mermaid.html,内容为：\n1 2 3 4 5 \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{ .Inner | htmlEscape | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} 然后在layouts/partials/article/content.html最后面添加如下代码：\n1 2 3 4 5 6 {{ if .Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {{ end }} 这样就可以了，hugo server -D 运行看看效果\n示例 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! 效果 sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ","date":"2025-02-11T14:54:27+08:00","image":"https://QuincyGao.github.io/p/hugo-%E5%B0%8F%E6%8A%80%E5%B7%A7/2_hu18083178838280766805.jpg","permalink":"https://QuincyGao.github.io/p/hugo-%E5%B0%8F%E6%8A%80%E5%B7%A7/","title":"hugo 小技巧"},{"content":"b2b_logic模块介绍 b2b_logic 官方使用场景介绍:https://www.opensips.org/Documentation/Tutorials-B2BUA-3-2\n本次测试的opensips版本为：\nopensips 3.3.10 (x86_64/linux)\nb2b_logic 实战 配置:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 loadmodule \u0026#34;b2b_entities.so\u0026#34; loadmodule \u0026#34;rtp_relay.so\u0026#34; loadmodule \u0026#34;dialog.so\u0026#34; loadmodule \u0026#34;b2b_logic.so\u0026#34; modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;hash_size\u0026#34;, 10) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;script_req_route\u0026#34;, \u0026#34;b2b_logic_request\u0026#34;) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;script_reply_route\u0026#34;, \u0026#34;b2b_logic_reply\u0026#34;) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;cleanup_period\u0026#34;, 60) #modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;db_url\u0026#34;, \u0026#34;mysql://opensips:opensipsrw@172.16.4.111/opensips\u0026#34;) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;update_period\u0026#34;, 60) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;max_duration\u0026#34;, 7200) #modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;contact_user\u0026#34;, 1) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;server_address\u0026#34;, \u0026#34;sip:$fU@172.16.4.111:5360\u0026#34;) #modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;db_mode\u0026#34;, 1) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;b2bl_th_init_timeout\u0026#34;, 60) modparam(\u0026#34;b2b_logic\u0026#34;, \u0026#34;b2bl_early_update\u0026#34;, 1) 在 route主请求中添加：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 if(is_method(\u0026#34;INVITE\u0026#34;) \u0026amp;\u0026amp; !has_totag()) { xlog(\u0026#34;L_DBG\u0026#34;,\u0026#34;[$cfg_line][$ci]---b2b-server_new--:$rm|$rs|$tu|$socket_in(port)|$var(contact)\\n\u0026#34;); b2b_server_new(\u0026#34;caller\u0026#34;); create_dialog(\u0026#34;B\u0026#34;); rtp_relay_engage(\u0026#34;rtpengine\u0026#34;,0); #$avp(route)=\u0026#34;Record-Route\u0026#34;; #$avp(route-content)=\u0026#34;\u0026lt;sip:172.16.4.111:5360;lr\u0026gt;\u0026#34;; #b2b_client_new(\u0026#34;callee\u0026#34;, \u0026#34;sip:$tU@172.16.4.114:5080\u0026#34;,,,$ct); b2b_client_new(\u0026#34;callee\u0026#34;, \u0026#34;sip:$tU@172.16.4.114:5080\u0026#34;); #record_route(); #b2b_client_new(\u0026#34;callee\u0026#34;, \u0026#34;sip:$tU@172.16.4.114:5080\u0026#34;,,,$ct,$avp(route),$avp(route-content)); # initialize B2B session b2b_init_request(\u0026#34;prepaid\u0026#34;); exit; } route[b2b_logic_reply] { xlog(\u0026#34;L_INFO\u0026#34;,\u0026#34;[$fU $tU $ci $rm] B2B_Reply Received from $si:$sp User-Agent:$ua\\n\u0026#34;); xlog(\u0026#34;L_INFO\u0026#34;,\u0026#34;[$fU $tU $ci $rm] B2B_Reply message $rs:$rr received \\n\u0026#34;); b2b_handle_reply(); exit; } route[b2b_logic_request] { xlog(\u0026#34;L_INFO\u0026#34;,\u0026#34;[$fU $tU $ci $rm] B2B_Request Received from $si:$sp User-Agent:$ua\\n\u0026#34;); xlog(\u0026#34;L_INFO\u0026#34;,\u0026#34;[$fU $tU $ci $rm] B2B_Request message $rs:$rr received \\n\u0026#34;); b2b_pass_request(); exit; } 需要注意的是， b2b_logic中媒体服务使用的是rtp_relay,通过rtp_relay来选择媒体代理。 通过b2b_logic 转发的INVITE的Call-ID是新生成的（例如:B2B.377.4269969.1739239153）和主叫的INVITE的Call-ID不同。\n目前发现，被叫挂断时b2b_logic会多发送一个Bye给自己，这个应该是invite的Contact被修改成了111机器的缘故。\n主叫挂断的sip流程图：\n被叫挂断的sip流程图：\n","date":"2025-02-11T08:49:22+08:00","image":"https://QuincyGao.github.io/p/b2b_logic%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/2_hu2473336972660618009.jpg","permalink":"https://QuincyGao.github.io/p/b2b_logic%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/","title":"b2b_logic模块介绍"},{"content":"介绍 uac_registant模块是把自己作为uac注册到第三方sip服务，必须使用数据库来存储自己的注册信息。 使用的表为: registrant\n本次测试的opensips版本为:\nopensips 3.5.3 (x86_64/linux)\n配置添加 1 2 3 4 5 6 7 loadmodule \u0026#34;db_mysql.so\u0026#34; loadmodule \u0026#34;uac_auth.so\u0026#34; loadmodule \u0026#34;uac_registrant.so\u0026#34; modparam(\u0026#34;uac_registrant\u0026#34;, \u0026#34;hash_size\u0026#34;, 4) modparam(\u0026#34;uac_registrant\u0026#34;, \u0026#34;timer_interval\u0026#34;, 30) modparam(\u0026#34;uac_registrant\u0026#34;, \u0026#34;failure_retry_interval\u0026#34;, 60) modparam(\u0026#34;uac_registrant\u0026#34;, \u0026#34;db_url\u0026#34;, \u0026#34;mysql://opensips:opensipsrw@172.16.3.102/opensips\u0026#34;) 需要注意的是: timer_interval 要小于registrant表里的expiry字段时间，否则服务启动时报错：\nERROR:uac_registrant:load_reg_info_from_db: Please decrease timer_interval=[120] - requested expires=[100] to small for AOR=[sip:1001@172.16.4.114]\n添加数据库 1 insert into registrant (registrar, aor, username, password, binding_URI, expiry, forced_socket)values(\u0026#34;sip:172.16.4.114:5060\u0026#34;,\u0026#34;sip:1001@172.16.4.111\u0026#34;,\u0026#34;1001\u0026#34;,\u0026#34;1234\u0026#34;,\u0026#34;sip:1001@172.16.4.111\u0026#34;,300,\u0026#34;udp:172.16.4.111:5361\u0026#34;); registrar: 注册的sip服务地址\naor: From, to 字段的uri\nusername,password: 用户名密码\nbinding_URI: contact 字段\nexpiry: 过期时间\nforced_socket: opensips发送register请求的socket地址\n测试结果 opensips启动30s后,跟踪sip信令,能够看到以下信息 总结 该模块只是把opensips以配置的用户名密码注册到第三方sip，使用场景有限，能够使用的场景有：\n检测第三方sip服务是否正常 维持 NAT/防火墙穿透 ","date":"2025-02-08T09:56:29+08:00","image":"https://QuincyGao.github.io/p/uac_registant%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/2_hu11294429585031955147.jpg","permalink":"https://QuincyGao.github.io/p/uac_registant%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/","title":"uac_registant模块介绍"},{"content":"背景介绍 自从使用opensips和rtpengine做sbc以来，一直对其所能支撑的并发数有所怀疑，正好最近项目不多，就申请了三台阿里云机器来做压测，共耗时一个月。\n本次压测的功能：把opensips用作注册代理转发，现对压测结果做个总结。\n压测模型 压测场景 坐席A和B使用udp通过opensips注册到uas，坐席A通过opensips拨打电话到坐席B, 坐席B接通电话后，坐席A和B通过opensips进行2分钟通话，然后坐席A挂断电话。\n版本信息 1 2 3 opensips: 3.3.10 rtpengine: 13.1.0.0+0~mr13.1.0.0 opensips和rtpengine 分别用host模式docker容器运行。 opensips和rtpengine使用docker部署的好处就是使用docker stats 能够获取容器是实际占用内存和cpu使用率\n监控指标 1 2 3 4 5 6 cpu使用率 负载 内存使用率 网络带宽 tcp 连接数 通话数 监控工具 1 2 3 阿里云的资源监控 opensips-cli docker stats 命令 压测注意问题 1. 压测的cps和通话时长要合适 压测目的是保持稳定并发数时的资源使用情况\n如果通话时长太短比如:1分钟以内，在高并发的情况下(1000往上)，无法稳定保持并发数。 如果cps太大，此时网络带宽会有比较大的波动，高并发数情况下，opensips和uas会出现丢包情况。 合理的cps计算方式为: 并发数/通话时长(s),如果是小数可以适当向上取整。 比如: 1000并发数，通话时长为2分钟，那么cps为1000/120=8.3约等于9。 对应的sipp 命令为: -r 9 -rp 1s\n2. 如何确定总压测时长 压测时长2小时，实际的sipp压测脚本参数并没有总通话时长，但sipp中有总压测数参数，那么应该如何确定压测时长呢？\n总压测数=并发数*压测时长(分钟)/通话时长(分钟)\n对于此压测场景，总压测数=1000*120/2=60000,对应的sipp命令为: -m 60000\n注意：实际压测中并不是并发数1000，sipp的-l 就是1000，可能会比1000多几个，按照实际压测来调整.\n3. 完整的uac sipp命令 以1000路为例:\n1 ./sipp -r 9 -rp 1s -i 172.16.4.115 -p 5667 -sf register.xml -inf $csvfile 172.20.231.4:5261 -l 1019 -m 61140 -aa -trace_err -error_file ./reg_error.log -bg 压测结果分析 opensips和rtpengine的内存未释放？ 在udp压测时，opensips的运行参数为: -m 2048 -M 100 意思为:共享内存为2048MB,pkg内存100MB, udp_workers=32 tcp_workers=8。 在实际压测过程中，阿里云的监控能够看到，内存使用率一直都是2G，变化较少。但是通过docker stats分别在压测开始和结束统计,能够看到opensips和rtpengine的实际占用内存是有变化的。以1000路为例:\nopensips:959.4MiB-\u0026gt;982MiB | rtpengine: 23.89MiB-\u0026gt;87.73MiB\n压测停止6小时之后，opensips和rtpengine的docker实际占用内存并没有减少，一开始我以为是内存泄露，调整opensips.cfg添加memdump=2开启内存打印。\n在压测结束后， 通过opensips-cli执行mi mem_shm_dump,参考：opensips内存泄漏排查，并没有发现有相似的dumping all alloc'ed. fragments。 而且压测结束后，查看rtpengine的端口占用情况，rtp端口都被释放了。\n值得注意的是：并发数减少，opensips和rtpengin的内存占用不会变，并发数增加，它们的内存会往上升。之后一直维持该内存大小不再增加。\n个人猜测： opensips和rtpengine的占用内存是动态扩展的，当并发数增加，内存会自动扩展，当并发数减少，占用的内存不会自动释放。\n压测极限 监测数据 本次使用的是opensips-cli\n1 2 3 mi get_statistics dialog active_dialogs 可以查看实时通话量 mi get_statistics dialog processed_dialogs 可以查看通话总数 mi get_statistics all 可以查看所有统计数据 实际压测数据 8C8G压测的极限是1700路，此极限是rtpengine的极限,cpu负载过大，导致rtpengine出流较慢，影响了通话质量。opensips其实并未到极限。\n压测结束后，通过opensips-cli执行mi get_statistics all 能够看到实际占用的内存很少，还有大量的内存空闲。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026#34;shmem:total_size\u0026#34;: 2147483648, \u0026#34;shmem:max_used_size\u0026#34;: 15768384, \u0026#34;shmem:free_size\u0026#34;: 2142524128, \u0026#34;shmem:used_size\u0026#34;: 4708928, \u0026#34;shmem:real_used_size\u0026#34;: 4959520, \u0026#34;shmem:fragments\u0026#34;: 3871, \u0026#34;rpmem:rpm_total_size\u0026#34;: 0, \u0026#34;rpmem:rpm_used_size\u0026#34;: 0, \u0026#34;rpmem:rpm_real_used_size\u0026#34;: 0, \u0026#34;rpmem:rpm_fragments\u0026#34;: 0, \u0026#34;rpmem:rpm_max_used_size\u0026#34;: 0, \u0026#34;rpmem:rpm_free_size\u0026#34;: 0, sip 使用tcp通信 场景：\nuac\u0026ndash;tcp\u0026mdash;-\u0026gt;opensips\u0026mdash;-tcp\u0026mdash;-\u0026gt;uas\nuac和opensips使用tcp通信，uac是多个tcp连接到opensips的同一个端口. 在opensips和uas使用tcp通信时，原本以为会是多个tcp和uas连接，结果只用了一个tcp连接，所有的请求都是复用这个tcp连接。 tcp的性能比udp性能要高，tcp连接方式并发能到1800路。 总结 opensips-cli只能获取实时数据，无法获取历史数据。可以考虑使用opensips-cp监控。 rtpengine在高并发情况下，为啥会出流慢，目前还未找到原因，rtpengine的日志也没有报错。 ","date":"2025-01-14T08:59:33+08:00","image":"https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/backup_hu11264033365958483853.jpg","permalink":"https://QuincyGao.github.io/p/opensips-%E5%8E%8B%E6%B5%8B%E4%BB%8B%E7%BB%8D/","title":"opensips 压测介绍"}]